theme(legend.position = "none")
gg.post.rate.3.maj.clades
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))  +
scale_fill_manual(values = cols[c(8, 5, 3)]) +
theme(legend.position = "none")
gg.post.rate.3.maj.clades
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))  +
scale_fill_manual(values = cols[c(8, 3, 5)]) +
theme(legend.position = "none")
gg.post.rate.3.maj.clades
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(3, 5, 8)]) +
theme(legend.position = "none")
# list all files
fls <- list.files(recursive = TRUE, full.names = TRUE)
# size in MB
sizes <- round(file.size(fls) / 1048576, 2)
# put in data frame
df <- data.frame(dir = dirname(fls),  file = basename(fls), sizes, full.name = fls, stringsAsFactors = FALSE)
if (any(df$sizes > 99.9))
df[df$sizes > 99.9, ] else print("all files are smaller than 100MB")
system("git add .")
system('git commit -m "brachwise rates html"')
system("git push origin master")
system("git add .")
system('git commit -m "update readme"')
system("git push origin master")
library("devtools")
install_github("rgriff23/btw")
packrat::init()
packrat::status()
packrat::snapshot()
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c(
"ggtree",
"ape",
"viridis",
"ggplot2",
"adephylo",
"parallel",
"pbapply",
"cowplot",
"coda"
)
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[, "Package"])  {
if (grepl("/", y))
devtools::install_github(y, force = TRUE)
else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 58, fig.width = 20, fig.height = 15)
#colors for plots
cols <- viridis(10, alpha = 0.7)
# font size of clade labels
fontsize <- 13
# edge width
lwd <- 2
# functions to get descendant nodes
select.tip.or.node <- function(element, tree) {
ifelse(element < Ntip(tree)+1, tree$tip.label[element], tree$node.label[element-Ntip(tree)])
}
get_edge_table <- function(phy){
phy$node.label <- paste0("node", seq_len(Ntip(phy)))
edge_table <- data.frame(
"parent" = phy$edge[,1],
"par.name" = sapply(phy$edge[,1], select.tip.or.node, tree = phy),
"child" = phy$edge[,2],
"chi.name" = sapply(phy$edge[,2], select.tip.or.node, tree = phy),
length = phy$edge.length
)
return(edge_table)
}
# make any numeric variable within a specific range
range01 <- function(x, min = 0, max = 1){
x <- x + min(x)
x <- (x-min(x))/(max(x)-min(x))
x <- x * (max - min)
x <- x + min
return(x)
}
# ggplot2 theme
theme_set(theme_classic(base_size = 14,base_family = "Arial"))
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy <- rotateConstr(phy = phy, constraint = rev(phy$tip))
phy <- ladderize(phy)
# read branchwise rates
xls <- list.files(path = "./output/bayestraits", full.names = TRUE, pattern = "\\.xls")
# get branchwise rates into a list
branchwise_rates <- lapply(xls, function(x) {
X <- as.data.frame(read_excel(x))
X$variable <- gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(x))
# get the ones with r == 1 (r != 1 means significantly different than background rate)
X$log.r <- log(X$`Median Scalar (r)` + 1)
names(X)[7] <- "Optimized Rate (r * backgroundrate)"
domain <- range(0, 1)
pal_fun <- colorNumeric(palette = "viridis", domain = domain, reverse = TRUE)
# previewColors(pal_fun, seq(min(domain), max(domain), length.out = 30))
X$r.for.color <- NA
# color range for low rates
X$r.for.color[X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`] <- range01(X$log.r[X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`], min = 0.7, max = 0.8)
# color range for high rates
X$r.for.color[X$`Optimized Rate (r * backgroundrate)`> X$`Background Rate (per million year)`] <- range01(X$log.r[X$`Optimized Rate (r * backgroundrate)`> X$`Background Rate (per million year)`], min = 0.1, max = 0.5)
X$rate.color <- "gray"
X$rate.color <- pal_fun(X$r.for.color)
# get gray the ones with less than 95% of time under background rate
X$rate.color[X$`Percentage time scaled`< 95] <- "gray"
return(X)
})
# names(branchwise_rates) <-  gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(xls))
names(branchwise_rates) <- c("Sequence complexity", "# of element types", "Acoustic space", "Between song variation")
# get background rates per parameter
background_rates <- sapply(branchwise_rates, function(x)
mean(x$`Background Rate (per million year)`))
log_background_rates <- log(background_rates + 1)
# put branchwise rates in a single data frame
phy.btw.sng.vr <- drop.tip(phy, tip = setdiff(phy$tip.label, branchwise_rates$`Between song variation`$`Taxa List`[branchwise_rates$`Between song variation`$`No Taxa` == 1]))
# ggplot2 theme
theme_set(theme_tree2(base_size = 14,base_family = "Arial"))
# song acoustic parameters
song.acoust.param <- read.csv("data/processed/acoustic/Song parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
song.acoust.param$species <- song.acoust.param$species_uscr
sp.clade <- song.acoust.param[!duplicated(song.acoust.param$species) , c("species", "Clade")]
# rename hummers
sp.clade$maj.clade <- ifelse(sp.clade$Clade %in% c("Nightjars", "Swifts"), sp.clade$Clade, "Hummingbirds")
# all clades Except for Patagona
all.clade.nodes <- sapply(c("Emeralds", "Coquettes", "Swifts", "Brilliants", "Mangoes", "Hermits", "Nightjars", "Bees", "Mtn. Gems", "Topazes", "Hummingbirds"), function(x) getMRCA(phy = phy, tip = if(x == "Hummingbirds") sp.clade$species[!sp.clade$Clade %in% c("Swifts", "Nightjars")] else sp.clade$species[sp.clade$Clade == x]))
# 3 major clades
maj.clade.nodes <- sapply(c("Swifts", "Nightjars", "Hummingbirds"), function(x) getMRCA(phy = phy, tip = if(x == "Hummingbirds") sp.clade$species[!sp.clade$Clade %in% c("Swifts", "Nightjars")] else sp.clade$species[sp.clade$Clade == x]))
sp.clade.bsv  <- sp.clade[sp.clade$species %in%  phy.btw.sng.vr$tip.label, ]
# 3 major clades for between song variation
maj.clade.nodes.bsv <- sapply(c("Swifts", "Nightjars", "Hummingbirds"), function(x) getMRCA(phy = phy.btw.sng.vr, tip = if(x == "Hummingbirds") sp.clade.bsv$species[!sp.clade.bsv$Clade %in% c("Swifts", "Nightjars")] else sp.clade.bsv$species[sp.clade.bsv$Clade == x]))
# all clades Except for Patagona for between song variation
all.clade.nodes.bsv <- sapply(c("Emeralds", "Coquettes", "Swifts", "Brilliants", "Mangoes", "Hermits", "Nightjars", "Bees", "Mtn. Gems", "Topazes", "Hummingbirds"), function(x) getMRCA(phy = phy.btw.sng.vr, tip = if(x == "Hummingbirds") sp.clade.bsv$species[!sp.clade.bsv$Clade %in% c("Swifts", "Nightjars")] else sp.clade.bsv$species[sp.clade.bsv$Clade == x]))
# MRCAs for major clades
major.clade.nodes <- sapply(c("Nightjars", "Swifts", "Hummingbirds"), function(x) getMRCA(phy = phy, tip = sp.clade$species[sp.clade$maj.clade == x]))
# MRCAs for major clades for between song variation
major.clade.nodes.bsv <- sapply(c("Nightjars", "Swifts", "Hummingbirds"), function(x) getMRCA(phy = phy.btw.sng.vr, tip = sp.clade.bsv$species[sp.clade.bsv$maj.clade == x]))
# base ggtree graph major clades
gg.all.clade <- ggtree(phy, ladderize = FALSE, size = lwd) +
theme_tree2() +  xlim(NA, 130) +
theme(text=element_text(size = 35)) + labs(x = "Millions of years")
# add clade labels
for(i in 1:length(all.clade.nodes))
gg.all.clade <- gg.all.clade + geom_cladelabel(node = all.clade.nodes[i], label = names(all.clade.nodes)[i],   fontsize = fontsize, align=TRUE, barsize = 2, offset = if(names(all.clade.nodes)[i] == "Hummingbirds") 33 else 0.7, color = if(names(all.clade.nodes)[i] == "Hummingbirds") "gray81" else "gray45")
# base ggtree graph major clades for between song variation
gg.all.clade.bsv <- ggtree(phy.btw.sng.vr, ladderize = FALSE, size = lwd) +
theme_tree2() + xlim(NA, 130) +
theme(text=element_text(size = 35))
# add labels
for(i in 1:length(all.clade.nodes.bsv))
gg.all.clade.bsv <- gg.all.clade.bsv + geom_cladelabel(node = all.clade.nodes.bsv[i], label = names(all.clade.nodes.bsv)[i],   fontsize = fontsize, align=TRUE, barsize = 2, offset = if(names(all.clade.nodes.bsv)[i] == "Hummingbirds") 33 else 0.7, color = if(names(all.clade.nodes.bsv)[i] == "Hummingbirds") "gray81" else "gray45")
# tree with 10 tips for the all clades except Patagona
all.clade.collapse.tree <- drop.tip(phy, tip = c(setdiff(phy$tip.label, sp.clade$species[!duplicated(sp.clade$Clade)]), "Patagona_gigas"))
# rename tips
all.clade.collapse.tree$tip.label <- c("Nightjars", "Swifts", "Hermits", "Topazes", "Mangoes", "Emeralds", "Mtn. Gems", "Bees", "Brilliants", "Coquettes")
# base ggtree graph all clades
gg.all.clade.collapse.tree <- ggtree(all.clade.collapse.tree, ladderize = FALSE, size = lwd) +
theme_tree2() +
theme(text=element_text(size = 35)) +
geom_hilight(node = 13, fill = viridis(10)[8]) + # add hummingbird clade label
geom_label(aes(label = label), hjust = 0.8, size = 10) # add labels to tips
# tree with 3 tips for the 3 major clades
major.clade.collapse.tree <- drop.tip(phy, tip = setdiff(phy$tip.label, c("Phaethornis_guy", "Nyctidromus_albicollis","Streptoprocne_zonaris")))
# rename tips
major.clade.collapse.tree$tip.label <- c("Nightjars", "Swifts", "Hummingbirds")
# base ggtree graph major clades
gg.major.clade.collapse.tree <- ggtree(major.clade.collapse.tree, ladderize = FALSE) +
theme_tree2() +
theme(text=element_text(size = 35)) +
geom_label(aes(label = label), hjust = 0.8, size = 10)
### all nodes for each clade
all.nodes <- lapply(all.clade.nodes, function(x)
c(x, allDescendants(x = phy)[[x]]))
all.nodes.bsv <- lapply(all.clade.nodes.bsv, function(x)
c(x, allDescendants(x = phy.btw.sng.vr)[[x]]))
### all nodes for each of 3 major clade
maj.3.nodes <- lapply(maj.clade.nodes, function(x)
c(x, allDescendants(x = phy)[[x]]))
maj.3.nodes.bsv <- lapply(maj.clade.nodes.bsv, function(x)
c(x, allDescendants(x = phy.btw.sng.vr)[[x]]))
# read branchwise rates
trees <- list.files(path = "./output/bayestraits", full.names = TRUE, pattern = "\\.trees$")
rate.trees <- lapply(trees, read.nexus)
names(rate.trees) <- c("Acoustic space", "Between song variation", "Sequence complexity", "# of element types")
y = 1
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- lapply(rate.tree[1:3], function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree[1:3], cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
rates_l
# put them in a matrix
rates_mt <- do.call(rbind, rates_l)
rates_mt
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
rates_mt
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
rates_clm
rates_clm <- paste(names(rates_clm), rates_clm)
rates_clm
names(rate.trees) <- c("acoustic_space", "between_song_variation", "sequence_complexity", "element_types")
paste0("./output/pathwise_rates",, names(rate.trees)[1], ".txt")
paste0("./output/pathwise_rates", names(rate.trees)[1], ".txt")
y
paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt")
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
# read branchwise rates
trees <- list.files(path = "./output/bayestraits", full.names = TRUE, pattern = "\\.trees$")
rate.trees <- lapply(trees, read.nexus)
# names(rate.trees) <- c("Acoustic space", "Between song variation", "Sequence complexity", "# of element types")
names(rate.trees) <- c("acoustic_space", "between_song_variation", "sequence_complexity", "element_types")
# get mean posterior rates per parameter
pathrates_l <- lapply(1:length(trees), function(y){
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree, cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
rates_clm <- paste(names(rates_clm), rates_clm)
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
})
packrat::snapshot()
system("git add .")
system('git commit -m "pathwise rate files"')
rate.tree
all.songs.complx.df <- read.csv("data/processed/acoustic/All songs complexity parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
head(all.songs.complx.df)
song.acoust.param <- read.csv("data/processed/acoustic/Song parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
song.acoust.param$species <- song.acoust.param$species_uscr
head(song.acoust.param)
all.songs.complx.df <- read.csv("data/processed/acoustic/All songs complexity parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
all.songs.complx.df
head(all.songs.complx.df)
songs.complx.param <- read.csv("data/processed/acoustic/log10 songs complexity parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
head(songs.complx.param)
y = 1
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree, cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
names(rate.trees) <- names(songs.complx.param)[2:5]
names(rate.trees)
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
rates_clm <- paste(names(rates_clm), rates_clm)
rates_clm
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
rates_clm
names(rate.trees)
names(rate.trees)[y]
songs.complx.param[, names(rate.trees)[y]]
songs.complx.param[, c("species", names(rate.trees)[y])]
param <- songs.complx.param[, c("species", names(rate.trees)[y])]
sps <- data.frame(species = names(rates_clm))
sps
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param$elm.types[param$species == x], collapse = " "))
sps$param
head(sps)
sp_param <- apply(sps, 1, paste, collapse = " ")
sp_param
head(    rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
)
head(sp_param)
rates_clm <- paste(sp_param, rates_clm)
head(rates_clm)
str(rates_clm)
names(rate.trees)[y]
# save
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
# get mean posterior rates per parameter
pathrates_l <- lapply(2:length(trees), function(y){
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree, cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
# paste in a single vector
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
# extract parameter
param <- songs.complx.param[, c("species", names(rate.trees)[y])]
# put it in a dataframe
sps <- data.frame(species = names(rates_clm))
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param$elm.types[param$species == x], collapse = " "))
# paste species and parameter
sp_param <- apply(sps, 1, paste, collapse = " ")
# paste species parameter and rates
rates_clm <- paste(sp_param, rates_clm)
# save
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
})
y = 2
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree, cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
# paste in a single vector
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
# extract parameter
param <- songs.complx.param[, c("species", names(rate.trees)[y])]
# put it in a dataframe
sps <- data.frame(species = names(rates_clm))
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param$elm.types[param$species == x], collapse = " "))
# paste species and parameter
sp_param <- apply(sps, 1, paste, collapse = " ")
# paste species parameter and rates
rates_clm <- paste(sp_param, rates_clm)
head(rates_clm)
sp_param
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param$elm.types[param$species == x], collapse = " "))
sps$param
sps
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param[param$species == x, 2], collapse = " "))
sps$param
head(sps)
# paste species and parameter
sp_param <- apply(sps, 1, paste, collapse = " ")
# paste species parameter and rates
rates_clm <- paste(sp_param, rates_clm)
head(rates_clm)
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
# paste in a single vector
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
# extract parameter
param <- songs.complx.param[, c("species", names(rate.trees)[y])]
# put it in a dataframe
sps <- data.frame(species = names(rates_clm))
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param[param$species == x, 2], collapse = " "))
# paste species and parameter
sp_param <- apply(sps, 1, paste, collapse = " ")
# paste species parameter and rates
rates_clm <- paste(sp_param, rates_clm)
head(rates_clm)
# save
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
# get mean posterior rates per parameter
pathrates_l <- lapply(3:length(trees), function(y){
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree, cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
# paste in a single vector
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
# extract parameter
param <- songs.complx.param[, c("species", names(rate.trees)[y])]
# put it in a dataframe
sps <- data.frame(species = names(rates_clm))
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param[param$species == x, 2], collapse = " "))
# paste species and parameter
sp_param <- apply(sps, 1, paste, collapse = " ")
# paste species parameter and rates
rates_clm <- paste(sp_param, rates_clm)
# save
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
})
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c(
"ggtree",
"ape",
"viridis",
"ggplot2",
"adephylo",
"parallel",
"pbapply",
"cowplot",
"coda"
)
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[, "Package"])  {
if (grepl("/", y))
devtools::install_github(y, force = TRUE)
else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 58, fig.width = 20, fig.height = 15)
# read branchwise rates
trees <- list.files(path = "./output/bayestraits", full.names = TRUE, pattern = "\\.trees$")
rate.trees <- lapply(trees, read.nexus)
rate.trees <- lapply(trees, read.nexus)
songs.complx.param <- read.csv("data/processed/acoustic/log10 songs complexity parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
head(songs.complx.param)
names(rate.trees) <- names(songs.complx.param)[2:5]
y = 1
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree[1:10], cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
# paste in a single vector
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
rates_clm
# extract parameter
param <- songs.complx.param[, c("species", names(rate.trees)[y])]
param
# put it in a dataframe
sps <- data.frame(species = names(rates_clm))
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param[param$species == x, 2], collapse = ","))
sps$param
sps$param[1]
head(sps)
# paste species and parameter
sp_param <- apply(sps, 1, paste, collapse = "\tUnlinked\t")
sp_param
sps$param[1]
sp_param[1]
# paste species parameter and rates
rates_clm <- paste(sp_param, rates_clm)
rates_clm[1]
# save
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
# read branchwise rates
trees <- list.files(path = "./output/bayestraits", full.names = TRUE, pattern = "\\.trees$")
rate.trees <- lapply(trees, read.nexus)
songs.complx.param <- read.csv("data/processed/acoustic/log10 songs complexity parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
head(songs.complx.param)
# names(rate.trees) <- c("Acoustic space", "Between song variation", "Sequence complexity", "# of element types")
names(rate.trees) <- names(songs.complx.param)[2:5]
# get mean posterior rates per parameter
pathrates_l <- lapply(1:length(trees), function(y){
# extract 1 multiphylo with branch length representing amount of change
rate.tree <- rate.trees[[y]]
# loop over each sub tree to get pathwise rates for each species
rates_l <- pblapply(rate.tree, cl = detectCores() - 1, function(z) try(distRoot(z, method = "patristic"), silent = TRUE))
# remove errors
rates_l <- rates_l[sapply(rates_l, class) != "try-error"]
# put them in a matrix
rates_mt <- do.call(cbind, rates_l)
# paste in a single vector
rates_clm <- apply(rates_mt, 1, paste, collapse = ",")
# extract parameter
param <- songs.complx.param[, c("species", names(rate.trees)[y])]
# put it in a dataframe
sps <- data.frame(species = names(rates_clm))
# add acoustic parameter
sps$param <- sapply(sps$species, function(x)
paste(param[param$species == x, 2], collapse = ","))
# paste species and parameter
sp_param <- apply(sps, 1, paste, collapse = "\tUnlinked\t")
# paste species parameter and rates
rates_clm <- paste(sp_param, rates_clm)
# save
writeLines(rates_clm, paste0("./output/pathwise_rates_", names(rate.trees)[y], ".txt"))
})
