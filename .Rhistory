#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c("OUwie","geomorph", "mvMORPH", "Caetanods/ratematrix", "ggplot2", "viridis",  "kableExtra", "ape", "phytools", "phangorn", "pbapply", "tidyr", "YuLab-SMU/ggtree", "parallel",
"MCMCglmm", "spatstat", "raster", "adehabitatHR")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 58, fig.width = 12)
# list all files
fls <- list.files(recursive = TRUE, full.names = TRUE)
# size in MB
sizes <- round(file.size(fls) / 1048576, 2)
# put in data frame
df <- data.frame(dir = dirname(fls),  file = basename(fls), sizes, full.name = fls)
if (any(df$sizes > 99.9))
df[df$sizes > 99.9, ] else print("all files are smaller than 100MB")
readLines(".gitignore")
gi <- readLines(".gitignore")
df$full.name
c(gi, df$full.name[df$sizes > 99.9])
gi <- c(gi, df$full.name[df$sizes > 9])
gi
# put in data frame
df <- data.frame(dir = dirname(fls),  file = basename(fls), sizes, full.name = fls, stringsAsFactors = FALSE)
gi <- readLines(".gitignore")
gi <- c(gi, df$full.name[df$sizes > 9])
gi
writeLines(text = gi, con = ".gitignore")
# prepare project to send to github
# list all files
fls <- list.files(recursive = TRUE, full.names = TRUE)
# size in MB
sizes <- round(file.size(fls) / 1048576, 2)
# put in data frame
df <- data.frame(dir = dirname(fls),  file = basename(fls), sizes, full.name = fls, stringsAsFactors = FALSE)
if (any(df$sizes > 99.9))
df[df$sizes > 99.9, ] else print("all files are smaller than 100MB")
# read original data
all.songs.complx.df <- read.csv("data/processed/acoustic/All songs complexity parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
## complexity parameters
all.elm.acou.prm <- read.csv("data/processed/acoustic/Element parameters nighjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
all.elm.acou.prm$species <- gsub(" ", "_", all.elm.acou.prm$Species)
sp.clade <- all.elm.acou.prm[!duplicated(all.elm.acou.prm$species), c("species", "Clade")]
sp.clade
write.csv("~/Downloads/species_list_song_analysis_hummingbirds_and_sister_clades.csv", row.names = FALSE)
write.csv(spclade, "~/Downloads/species_list_song_analysis_hummingbirds_and_sister_clades.csv", row.names = FALSE)
write.csv(sp.clade, "~/Downloads/species_list_song_analysis_hummingbirds_and_sister_clades.csv", row.names = FALSE)
system("git add .")
system('git commit -m "README.md"')
system("git push origin master")
library(phytools)
#read in the time-tree, and make sure you delete (drop) the species with no data from it
phy  <- read.nexus(file='~/Downloads/Clupeiformes.trees')
tree <- drop.tip(phy,c('Microthrissa_congica',
'Encrasicholina_devisi',
'Coilia_brachygnathus',
'Coilia_grayii',
'Chirocentrus_sp'))
#read in the geo node numbers and species list
nodesgeo=read.delim("~/Downloads/SpeciesListClup.txt",header=F,sep="\t",stringsAsFactors=F)
#put the nodenumners as rownames
rownames(nodesgeo)=nodesgeo[,1]
#delete the firt column because it is a duplicate
nodesgeo[,1]=NULL
#delete the last column because it does not have information. Check the last cell number in your dataframe. Mine is 157
nodesgeo[,157]=NULL
#replace cell with no information for NA
nodesgeo[nodesgeo==""]=NA
#create a matrix to save the results
mat=matrix(nrow=nrow(nodesgeo),ncol=1)
#loop to get the R node number for each species list
for (i in 1:nrow(nodesgeo)) {
df.x=nodesgeo[i,]
df.x1=df.x[!is.na(df.x)]
df.x2=as.character(df.x1)
df.x3=findMRCA(tree,tips=df.x2)
mat[i,]=df.x3
}
head(mat)
colnames(mat) <- c("RNodeNumber")
YoSiSoyBienJalao <- rownames(nodesgeo)
YoSiSoyBienJalao <- rownames(nodesgeo)
obj <- rownames(nodesgeo)
obj <- gsub("-",".",obj)
obj <- as.data.frame(obj)
obj_y_Vivo <- cbind(obj,mat)
obj_y_Vivo
nodesgeo
head(nodesgeo)
# get branchwise rates into a list
branchwise_rates <- lapply(xls, function(x) {
X <- as.data.frame(read_excel(x))
X$variable <- gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(x))
# get the ones with r == 1 (r != 1 means significantly different than background rate)
X$log10.r <- log10(X$`Median Scalar (r)` + 1)
names(X)[7] <- "Optimized Rate (r * backgroundrate)"
X$rate.color <- ifelse(X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`, cols[2], cols[9])
X$rate.color[X$`Median Scalar (r)` == 1] <- "gray"
return(X)
})
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c(
"ggtree",
"ape",
"viridis",
"readxl",
"ggplot2"
)
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[, "Package"])  {
if (grepl("/", y))
devtools::install_github(y, force = TRUE)
else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 58, fig.width = 12, fig.height = 12)
cols <- magma(10)
# ggplot2 theme
theme_set(theme_classic(base_size = 14,base_family = "Arial"))
# main tree
phy <- read.tree("data/processed/trees/consensus_tree_swifts_hummingbirds_and_nighjars_max_cred.tree")
# read branchwise rates
xls <- list.files(path = "./output/bayestraits", full.names = TRUE)
# get branchwise rates into a list
branchwise_rates <- lapply(xls, function(x) {
X <- as.data.frame(read_excel(x))
X$variable <- gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(x))
# get the ones with r == 1 (r != 1 means significantly different than background rate)
X$log10.r <- log10(X$`Median Scalar (r)` + 1)
names(X)[7] <- "Optimized Rate (r * backgroundrate)"
X$rate.color <- ifelse(X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`, cols[2], cols[9])
X$rate.color[X$`Median Scalar (r)` == 1] <- "gray"
return(X)
})
names(branchwise_rates) <- c("PC1 complexity", "# of element types", "Acoustic space", "Between song variation")
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c(
"ggtree",
"ape",
"viridis",
"readxl",
"ggplot2"
)
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[, "Package"])  {
if (grepl("/", y))
devtools::install_github(y, force = TRUE)
else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 58, fig.width = 12, fig.height = 12)
# main tree
phy <- read.tree("data/processed/trees/ConsensoBayesTraits.trees")
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy
cols <- magma(10)
# ggplot2 theme
theme_set(theme_classic(base_size = 14,base_family = "Arial"))
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
# read branchwise rates
xls <- list.files(path = "./output/bayestraits", full.names = TRUE)
# get branchwise rates into a list
branchwise_rates <- lapply(xls, function(x) {
X <- as.data.frame(read_excel(x))
X$variable <- gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(x))
# get the ones with r == 1 (r != 1 means significantly different than background rate)
X$log10.r <- log10(X$`Median Scalar (r)` + 1)
names(X)[7] <- "Optimized Rate (r * backgroundrate)"
X$rate.color <- ifelse(X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`, cols[2], cols[9])
X$rate.color[X$`Median Scalar (r)` == 1] <- "gray"
X$node <- sapply(X$`Taxa List`, function(x) {
tips <- strsplit(x, split = ",")[[1]]
if (length(tips) == 1) tips <- c(tips, tips)
getMRCA(phy = phy, tip = tips)
})
return(X)
})
# names(branchwise_rates) <-  gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(xls))
names(branchwise_rates) <- c("PC1 complexity", "# of element types", "Acoustic space", "Between song variation")
# put branchwise rates in a single data frame
# df <- do.call(rbind, brachwise_rates)
anyDuplicated(branchwise_rates[[1]]$node)
branchwise_rates[[1]]$node
anyDuplicated(branchwise_rates[[1]]$node)
duplicated(branchwise_rates[[1]]$node)
Y <- branchwise_rates[[1]]
Y$dup <- anyDuplicated(Y$node)
Y <- Y[order(Y$node),]
View(Y[, c("node", "Taxa List")])
View(Y[duplicated(Y$node), c("node", "Taxa List")])
sum(duplicated(Y$node))
phy$tip
phy$tip == "Lesbia_nuna"
which(phy$tip == "Lesbia_nuna")
branchwise_rates <- lapply(xls, function(x) {
X <- as.data.frame(read_excel(x))
X$variable <- gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(x))
# get the ones with r == 1 (r != 1 means significantly different than background rate)
X$log10.r <- log10(X$`Median Scalar (r)` + 1)
names(X)[7] <- "Optimized Rate (r * backgroundrate)"
X$rate.color <- ifelse(X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`, cols[2], cols[9])
X$rate.color[X$`Median Scalar (r)` == 1] <- "gray"
X$node <- sapply(X$`Taxa List`, function(x) {
tips <- strsplit(x, split = ",")[[1]]
node <- if (length(tips) == 1) which(phy$tip == tips) else
getMRCA(phy = phy, tip = tips)
})
return(X)
})
names(branchwise_rates) <- c("PC1 complexity", "# of element types", "Acoustic space", "Between song variation")
Y <- branchwise_rates[[1]]
Y$dup <- anyDuplicated(Y$node)
sum(duplicated(Y$node))
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy <- rotateNodes(phy,"all")
## add 'developer/' to packages to be installed from github
x <- c(
"ggtree",
"ape",
"viridis",
"readxl",
"ggplot2",
"leaflet",
"phytools"
)
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[, "Package"])  {
if (grepl("/", y))
devtools::install_github(y, force = TRUE)
else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy <- rotateNodes(phy,"all")
cols <- magma(10)
# ggplot2 theme
theme_set(theme_classic(base_size = 14,base_family = "Arial"))
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy <- rotateNodes(phy,"all")
# read branchwise rates
xls <- list.files(path = "./output/bayestraits", full.names = TRUE)
# get branchwise rates into a list
branchwise_rates <- lapply(xls, function(x) {
X <- as.data.frame(read_excel(x))
X$variable <- gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(x))
# get the ones with r == 1 (r != 1 means significantly different than background rate)
X$log10.r <- log10(X$`Median Scalar (r)` + 1)
names(X)[7] <- "Optimized Rate (r * backgroundrate)"
X$rate.color <- "gray"
X$rate.color <- ifelse(X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`, cols[2], cols[9])
X$rate.color[X$`Median Scalar (r)` == 1] <- "gray"
X$node <- sapply(X$`Taxa List`, function(x) {
tips <- strsplit(x, split = ",")[[1]]
node <- if (length(tips) == 1) which(phy$tip == tips) else
getMRCA(phy = phy, tip = tips)
})
return(X)
})
# names(branchwise_rates) <-  gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(xls))
names(branchwise_rates) <- c("Sequence complexity", "# of element types", "Acoustic space", "Between song variation")
# put branchwise rates in a single data frame
# df <- do.call(rbind, brachwise_rates)
ggtrs <- lapply(1:length(branchwise_rates), function(x){
X <- branchwise_rates[[x]]
# X$node <- X$`Node ID`
setdiff(phy$tip.label, X$`Taxa List`[X$`No Taxa` == 1])
phydrop <- drop.tip(phy, tip = setdiff(X$`Taxa List`[X$`No Taxa` == 1],phy$tip.label))
ggtree(phydrop, size = 1.6) %<+% X + aes(color=I(rate.color)) + ggtitle(X$variable[1])
})
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy
phy <- rotateNodes(phy,"all")
phy
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy$tip
rev(phy$tip)
phy$tip
phy <- rotateConstr(phy = phy, constraint = rev(phy$tip)
)
plot(phy)
phy <- rotateConstr(phy = phy, constraint = (phy$tip))
plot(phy)
phy <- rotateConstr(phy = phy, constraint = rev(phy$tip))
plot(phy)
# main tree
phy <- read.nexus("data/processed/trees/ConsensoBayesTraits.trees")
phy <- rotateConstr(phy = phy, constraint = rev(phy$tip))
plot(phy)
x == 4
x = 4
X <- branchwise_rates[[x]]
setdiff(phy$tip.label, X$`Taxa List`[X$`No Taxa` == 1])
phydrop <- drop.tip(phy, tip = setdiff(X$`Taxa List`[X$`No Taxa` == 1],phy$tip.label))
phydrop
X$node <- sapply(X$`Taxa List`, function(y) {
tips <- strsplit(y, split = ",")[[1]]
node <- if (length(tips) == 1) which(phydrop$tip == tips) else
getMRCA(phy = phydrop, tip = tips)
})
X$node
anyDuplicated(X$node)
