X$log.r <- log(X$`Median Scalar (r)` + 1)
names(X)[7] <- "Optimized Rate (r * backgroundrate)"
domain <- range(0, 1)
pal_fun <- colorNumeric(palette = "magma", domain = domain, reverse = TRUE)
# previewColors(pal_fun, seq(min(domain), max(domain), length.out = 30))
X$r.for.color <- NA
# color range for low rates
X$r.for.color[X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`] <- range01(X$log.r[X$`Optimized Rate (r * backgroundrate)`< X$`Background Rate (per million year)`], min = 0.7, max = 0.8)
# color range for high rates
X$r.for.color[X$`Optimized Rate (r * backgroundrate)`> X$`Background Rate (per million year)`] <- range01(X$log.r[X$`Optimized Rate (r * backgroundrate)`> X$`Background Rate (per million year)`], min = 0.1, max = 0.5)
X$rate.color <- "gray"
X$rate.color <- pal_fun(X$r.for.color)
# get gray the ones with less than 95% of time under background rate
X$rate.color[X$`Percentage time scaled`< 95] <- "gray"
return(X)
})
# names(branchwise_rates) <-  gsub("BranchWiseRate_|BranchWiseRates_|.xlsx", "", basename(xls))
names(branchwise_rates) <- c("Sequence complexity", "# of element types", "Acoustic space", "Between song variation")
# put branchwise rates in a single data frame
phy.btw.sng.vr <- drop.tip(phy, tip = setdiff(phy$tip.label, branchwise_rates$`Between song variation`$`Taxa List`[branchwise_rates$`Between song variation`$`No Taxa` == 1]))
# ggplot2 theme
theme_set(theme_tree2(base_size = 14,base_family = "Arial"))
# song acoustic parameters
song.acoust.param <- read.csv("data/processed/acoustic/Song parameters nightjars swifts and hummingbirds.csv", stringsAsFactors = FALSE)
song.acoust.param$species <- song.acoust.param$species_uscr
sp.clade <- song.acoust.param[!duplicated(song.acoust.param$species) , c("species", "Clade")]
# rename hummers
sp.clade$maj.clade <- ifelse(sp.clade$Clade %in% c("Nightjars", "Swifts"), sp.clade$Clade, "Hummingbirds")
# all clades Except for Patagona
all.clade.nodes <- sapply(c("Emeralds", "Coquettes", "Swifts", "Brilliants", "Mangoes", "Hermits", "Nightjars", "Bees", "Mtn. Gems", "Topazes", "Hummingbirds"), function(x) getMRCA(phy = phy, tip = if(x == "Hummingbirds") sp.clade$species[!sp.clade$Clade %in% c("Swifts", "Nightjars")] else sp.clade$species[sp.clade$Clade == x]))
# 3 major clades
maj.clade.nodes <- sapply(c("Swifts", "Nightjars", "Hummingbirds"), function(x) getMRCA(phy = phy, tip = if(x == "Hummingbirds") sp.clade$species[!sp.clade$Clade %in% c("Swifts", "Nightjars")] else sp.clade$species[sp.clade$Clade == x]))
sp.clade.bsv  <- sp.clade[sp.clade$species %in%  phy.btw.sng.vr$tip.label, ]
# 3 major clades for between song variation
maj.clade.nodes.bsv <- sapply(c("Swifts", "Nightjars", "Hummingbirds"), function(x) getMRCA(phy = phy.btw.sng.vr, tip = if(x == "Hummingbirds") sp.clade.bsv$species[!sp.clade.bsv$Clade %in% c("Swifts", "Nightjars")] else sp.clade.bsv$species[sp.clade.bsv$Clade == x]))
# all clades Except for Patagona for between song variation
all.clade.nodes.bsv <- sapply(c("Emeralds", "Coquettes", "Swifts", "Brilliants", "Mangoes", "Hermits", "Nightjars", "Bees", "Mtn. Gems", "Topazes", "Hummingbirds"), function(x) getMRCA(phy = phy.btw.sng.vr, tip = if(x == "Hummingbirds") sp.clade.bsv$species[!sp.clade.bsv$Clade %in% c("Swifts", "Nightjars")] else sp.clade.bsv$species[sp.clade.bsv$Clade == x]))
# MRCAs for major clades
major.clade.nodes <- sapply(c("Nightjars", "Swifts", "Hummingbirds"), function(x) getMRCA(phy = phy, tip = sp.clade$species[sp.clade$maj.clade == x]))
# MRCAs for major clades for between song variation
major.clade.nodes.bsv <- sapply(c("Nightjars", "Swifts", "Hummingbirds"), function(x) getMRCA(phy = phy.btw.sng.vr, tip = sp.clade.bsv$species[sp.clade.bsv$maj.clade == x]))
# base ggtree graph major clades
gg.all.clade <- ggtree(phy, ladderize = FALSE, size = lwd) +
theme_tree2() +  xlim(NA, 130) +
theme(text=element_text(size = 35)) + labs(x = "Millions of years")
# add clade labels
for(i in 1:length(all.clade.nodes))
gg.all.c;ade <- gg.all.clade + geom_cladelabel(node = all.clade.nodes[i], label = names(all.clade.nodes)[i],   fontsize = fontsize, align=TRUE, barsize = 2, offset = if(names(all.clade.nodes)[i] == "Hummingbirds") 33 else 0.7, color = if(names(all.clade.nodes)[i] == "Hummingbirds") "gray81" else "gray45")
# base ggtree graph major clades for between song variation
gg.all.clade.bsv <- ggtree(phy.btw.sng.vr, ladderize = FALSE, size = lwd) +
theme_tree2() + xlim(NA, 130) +
theme(text=element_text(size = 35))
# add labels
for(i in 1:length(all.clade.nodes.bsv))
gg.all.clade.bsv <- gg.alll.clade.bsv + geom_cladelabel(node = all.clade.nodes.bsv[i], label = names(all.clade.nodes.bsv)[i],   fontsize = fontsize, align=TRUE, barsize = 2, offset = if(names(all.clade.nodes.bsv)[i] == "Hummingbirds") 33 else 0.7, color = if(names(all.clade.nodes.bsv)[i] == "Hummingbirds") "gray81" else "gray45")
# tree with 10 tips for the all clades except Patagona
all.clade.collapse.tree <- drop.tip(phy, tip = c(setdiff(phy$tip.label, sp.clade$species[!duplicated(sp.clade$Clade)]), "Patagona_gigas"))
# rename tips
all.clade.collapse.tree$tip.label <- c("Nightjars", "Swifts", "Hermits", "Topazes", "Mangoes", "Emeralds", "Mtn. Gems", "Bees", "Brilliants", "Coquettes")
# base ggtree graph all clades
gg.all.clade.collapse.tree <- ggtree(all.clade.collapse.tree, ladderize = FALSE, size = lwd) +
theme_tree2() +
theme(text=element_text(size = 35)) +
geom_hilight(node = 13, fill = viridis(10)[8]) + # add hummingbird clade label
geom_label(aes(label = label), hjust = 0.8, size = 10) # add labels to tips
# tree with 3 tips for the 3 major clades
major.clade.collapse.tree <- drop.tip(phy, tip = setdiff(phy$tip.label, c("Phaethornis_guy", "Nyctidromus_albicollis","Streptoprocne_zonaris")))
# rename tips
major.clade.collapse.tree$tip.label <- c("Nightjars", "Swifts", "Hummingbirds")
# base ggtree graph major clades
gg.major.clade.collapse.tree <- ggtree(major.clade.collapse.tree, ladderize = FALSE) +
theme_tree2() +
theme(text=element_text(size = 35)) +
geom_label(aes(label = label), hjust = 0.8, size = 10)
### all nodes for each clade
all.nodes <- lapply(all.clade.nodes, function(x)
c(x, allDescendants(x = phy)[[x]]))
all.nodes.bsv <- lapply(all.clade.nodes.bsv, function(x)
c(x, allDescendants(x = phy.btw.sng.vr)[[x]]))
### all nodes for each of 3 major clade
maj.3.nodes <- lapply(maj.clade.nodes, function(x)
c(x, allDescendants(x = phy)[[x]]))
maj.3.nodes.bsv <- lapply(maj.clade.nodes.bsv, function(x)
c(x, allDescendants(x = phy.btw.sng.vr)[[x]]))
w
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# get data subset
dat <- post_rates[post_rates$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
gg.post.rate
gg.maj.clades
# 3 major clades
gg.post.rate <- gg.major.clade.collapse.tree
# 3 major clades
gg.post.3.maj.clades <- gg.major.clade.collapse.tree
gg.post.3.maj.clades
# get data subset
dat <- post_rates_3_clades[post_rates_3_clades$variable == w, ]
# get data subset
dat <- post_rates_3_clades[post_rates_3_clades$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable == "Between song variation") return(X) else
return(Y)
})
unique(dat$clade)
# keep only data within 95% quantile
dat.l <- lapply(as.character(unique(dat$clade)), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable == "Between song variation") return(X) else
return(Y)
})
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
length(dat.l)
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# 3 major clades
gg.post.rate.3.maj.clades <- gg.major.clade.collapse.tree
# get data subset
dat <- post_rates_3_clades[post_rates_3_clades$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
gg.post.rate.3.maj.clades
plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, gg.sng.prm.maj.clds, gg.sng.prm.hmm.clds, ncol = 2)
## add 'developer/' to packages to be installed from github
x <- c(
"ggtree",
"ape",
"viridis",
"readxl",
"ggplot2",
"leaflet",
"phangorn",
"parallel",
"pbapply",
"cowplot"
)
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[, "Package"])  {
if (grepl("/", y))
devtools::install_github(y, force = TRUE)
else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, gg.sng.prm.maj.clds, gg.sng.prm.hmm.clds, ncol = 2)
plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, ncol = 2)
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# get data subset
dat <- post_rates[post_rates$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# 3 major clades
gg.post.rate.3.maj.clades <- gg.major.clade.collapse.tree
# get data subset
dat <- post_rates_3_clades[post_rates_3_clades$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# # plot both together
print(plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, ncol = 2))
# # plot both together
cow_plt <- plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, ncol = 2)
return(cow_plt)
cow_plt
dev.off()
cow_plt
post_rates <- readRDS("./data/processed/posterior_evolutionary_rates_per_clade.RDS")
post_rates_3_clades <- readRDS("./data/processed/posterior_evolutionary_rates_per_clade_3_major_clades.RDS")
# for plot have clade as species
post_rates_3_clades$species <- post_rates_3_clades$clade
post_rates$species <- post_rates$clade
gg.rates <- lapply(unique(post_rates$variable), function(w){
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# get data subset
dat <- post_rates[post_rates$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# 3 major clades
gg.post.rate.3.maj.clades <- gg.major.clade.collapse.tree
# get data subset
dat <- post_rates_3_clades[post_rates_3_clades$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# # plot both together
cow_plt <- plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, ncol = 2)
return(cow_plt)
})
names(gg.rates) <- unique(post_rates$variable)
post_rates <- readRDS("./data/processed/posterior_evolutionary_rates_per_clade.RDS")
post_rates_3_clades <- readRDS("./data/processed/posterior_evolutionary_rates_per_clade_3_major_clades.RDS")
# for plot have clade as species
post_rates_3_clades$species <- post_rates_3_clades$clade
post_rates$species <- post_rates$clade
gg.rates <- lapply(unique(post_rates$variable), function(w){
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# get data subset
dat <- post_rates[post_rates$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# 3 major clades
gg.post.rate.3.maj.clades <- gg.major.clade.collapse.tree
# get data subset
dat <- post_rates_3_clades[post_rates_3_clades$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# # plot both together
cow_plt <- plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, ncol = 2)
return(cow_plt)
})
names(gg.rates) <- unique(post_rates$variable)
gg.rates$`Sequence complexity`
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# get data subset
dat <- post_rates[post_rates$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
gg.post.rate
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[c(3 ,6, 9)], alpha.f = 0.5), panel = paste("Log", w, "rates"))
gg.post.rate
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)cols[c(3 ,6, rep(9, 7))], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[c(3 ,6, rep(9, 7))], alpha.f = 0.5), panel = paste("Log", w, "rates"))
gg.post.rate
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), alpha.f = 0.5), panel = paste("Log", w, "rates"))
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), alpha.f = 0.5), panel = paste("Log", w, "rates"))
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))
gg.post.rate
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))
gg.post.rate
post_rates$maj.clade <- if(post_rates$clade %in% c("Swifts", "Nightjars"), post_rates$clade, "Hummingbirds")
post_rates$maj.clade <- ifelse(post_rates$clade %in% c("Swifts", "Nightjars"), post_rates$clade, "Hummingbirds")
post_rates$maj.clade
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates"))
gg.post.rate
post_rates$maj.clade <- ifelse(post_rates$clade %in% c("Swifts", "Nightjars"), post_rates$clade, "Hummingbirds")
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates"))
gg.post.rate
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
post_rates$maj.clade <- ifelse(post_rates$clade %in% c("Swifts", "Nightjars"), post_rates$clade, "Hummingbirds")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates"))
post_rates$maj.clade <- ifelse(post_rates$clade %in% c("Swifts", "Nightjars"), post_rates$clade, "Hummingbirds")
# all clades
gg.post.rate <- gg.all.clade.collapse.tree
# get data subset
dat <- post_rates[post_rates$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates"))
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
cale_color_manual(values = cols[c(3, 9, 6)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_color_manual(values = cols[c(3, 9, 6)]) +
theme(legend.position = "none")
#colors for plots
cols <- viridis(10)
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_color_manual(values = cols[c(3, 9, 6)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(3, 9, 6)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(9, 3, 6)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(8, 6, 3)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(8, 3, 6)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(8, 3, 5)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(8, 5, 2)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(8, 5, 4)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(8, 5, 3)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(8, 5, 8)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(3, 5, 8)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(3, 5, 7)]) +
theme(legend.position = "none")
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(3, 5, 8)]) +
theme(legend.position = "none")
# add facet violin
gg.post.rate <- facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(3, 5, 8)]) +
theme(legend.position = "none")
# 3 major clades
gg.post.rate.3.maj.clades <- gg.major.clade.collapse.tree
# 3 major clades
gg.post.rate.3.maj.clades <- gg.major.clade.collapse.tree
# get data subset
dat <- post_rates_3_clades[post_rates_3_clades$variable == w, ]
# keep only data within 95% quantile
dat.l <- lapply(unique(dat$clade), function(x){
X <- dat[dat$clade == x, ]
try(Y <- X[X$log.rate > quantile(X$log.rate, 0.025) & X$log.rate < quantile(X$log.rate, 0.975), ], silent = TRUE)
if (x == "Nightjars" & X$variable[1] == "Between song variation") return(X) else
return(Y)
})
dat <- do.call(rbind, dat.l)
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))
# # plot both together
cow_plt <- plot_grid(gg.post.rate.3.maj.clades, gg.post.rate, ncol = 2)
gg.post.rate.3.maj.clades
facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label), fill = adjustcolor(viridis(10)[8], alpha.f = 0.5), panel = paste("Log", w, "rates"))  +
scale_fill_manual(values = cols[c(3, 5, 8)]) +
theme(legend.position = "none")
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))  +
scale_fill_manual(values = cols[c(3, 5, 8)]) +
theme(legend.position = "none")
gg.post.rate.3.maj.clades
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))  +
scale_fill_manual(values = cols[c(3, 8, 5)]) +
theme(legend.position = "none")
gg.post.rate.3.maj.clades
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))  +
scale_fill_manual(values = cols[c(8, 5, 3)]) +
theme(legend.position = "none")
gg.post.rate.3.maj.clades
# add facet violin
gg.post.rate.3.maj.clades <- facet_plot(gg.post.rate.3.maj.clades, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = label), panel = paste("Log", w, "rates"))  +
scale_fill_manual(values = cols[c(8, 3, 5)]) +
theme(legend.position = "none")
gg.post.rate.3.maj.clades
# add facet violin
# gg.post.rate <-
facet_plot(gg.post.rate, data = dat, geom = geom_violin, aes(x= log.rate, group = label, fill = maj.clade), panel = paste("Log", w, "rates")) +
scale_fill_manual(values = cols[c(3, 5, 8)]) +
theme(legend.position = "none")
# list all files
fls <- list.files(recursive = TRUE, full.names = TRUE)
# size in MB
sizes <- round(file.size(fls) / 1048576, 2)
# put in data frame
df <- data.frame(dir = dirname(fls),  file = basename(fls), sizes, full.name = fls, stringsAsFactors = FALSE)
if (any(df$sizes > 99.9))
df[df$sizes > 99.9, ] else print("all files are smaller than 100MB")
system("git add .")
system('git commit -m "brachwise rates html"')
system("git push origin master")
system("git add .")
system('git commit -m "update readme"')
system("git push origin master")
library("devtools")
install_github("rgriff23/btw")
packrat::init()
packrat::status()
packrat::snapshot()
