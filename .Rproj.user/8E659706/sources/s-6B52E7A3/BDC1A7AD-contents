---
title: <center><font size="7"><b>Data checking</b></font></center>
subtitle: <center><font size="4"><b>Hummingbird song evolution</b></font></center>
author: <center><font size="4"><a href="http://marceloarayasalas.weebly.com/">Marcelo Araya-Salas, PhD</a></font></center>
#date: <center>`r format(Sys.Date(), "%d-%m-%Y")`</center>
output:
  html_document:
    
    toc: yes
    toc_depth: 3
    toc_float:
      collapsed: no
      smooth_scroll: no
fontsize: 12pt 
editor_options: 
  chunk_output_type: console
---

<font size="5"><b>Data description</b> (updated on `r format(Sys.Date(), "%d-%m-%Y")`)</font> 
&nbsp;

```{r packages, message=FALSE,warning = FALSE, echo = FALSE, eval = TRUE, include = FALSE}

rm(list = ls())

# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))

## add 'developer/' to packages to be installed from github
x <- c("ggplot2", "RColorBrewer", "googlesheets", "kableExtra", "knitr", "stringdist", "dplyr","maRce10/warbleR", "maRce10/Rraven", "diversitree", "cran/laser", "parallel", "taxize", "ape", "phytools",  "googledrive", "pbapply",  "eliotmiller/addTaxa")

aa <- lapply(x, function(y) {
  
  # get pakage name
  pkg <- strsplit(y, "/")[[1]]
  pkg <- pkg[length(pkg)]
  
  # check if installed, if not then install 
  if (!pkg %in% installed.packages()[,"Package"])  {

      if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
    install.packages(y) 
    }

  # load package
  try(require(pkg, character.only = T), silent = T)
  })


```

```{r functions and parameters, message = FALSE, warning = FALSE, echo = FALSE, eval = TRUE}

## functions #######

# capitalize genera
spCap <- function(x, sep = " ") {
out <- sapply(x, function(y){
    s <- strsplit(y, sep)[[1]]
  paste0(toupper(substring(s[1], 1,1)), tolower(substring(s[1], 2)), sep, tolower(s[2]))
  })
  names(out) <- NULL
return(out)
}

source('~/Dropbox/warbleR/R/ovlp_sels.R')

### measure proportion of overlaps in overlapping signals
## measure the proportional time that a given signal is overlapped by other signals (1 or more)

prop_ovlp <- function(X, pb = TRUE, parallel = 1) {

  # create temporary column with row number that will be used to put orignal rownames back on
  X$...ROWNAME2... <- rownames(X)
  
  # add duration for downstream analysis  
    X$duration <- X$end - X$start
   
  if (pb) write(file = "", x = "detecting overlaping selections (step 1 of 2):") 
  
    # calculate overlapping sels adding the row index
  X <- ovlp_sels(X, indx.row = TRUE, pb = pb, parallel = parallel)
  
    
  # function to calculate proportional overlap  
  prop.ovlp.FUN <- function(x){
  
    # subset for that sound file
    Y <- X[X$sound.files == x, , drop = FALSE]
    
    #keep only overlapping sels
    W <- Y[!is.na(Y$ovlp.sels), ]
     
      # if there are overlaps and more than one row
    if (nrow(W) > 1)
    { 
    # get indexes of overlapping sels for each row (returns a list)
    indxs <- lapply(W$indx.row, function(x) as.numeric(unlist(strsplit(x, "/"))))

    # loop over the unique indexes 
    ovlp.info <- lapply(na.omit(unique(unlist(indxs))), function(y){
      
      # get all rows that overlap with target index (y)
      Z <-  W[sapply(indxs, function(x) any(x == y)) & !sapply(indxs, function(x) is.na(x[1])), ]       
      
      # set start equal to start of target index for the ones that have lower start
      Z$start[Z$...ROWNAME2... != y] <- ifelse(Z$start[Z$...ROWNAME2... != y] < Z$start[Z$...ROWNAME2... == y], Z$start[Z$...ROWNAME2... == y], Z$start[Z$...ROWNAME2... != y])  

      # set end equal to end of target index for the ones that have higher end
      Z$end[Z$...ROWNAME2... != y] <- ifelse(Z$end[Z$...ROWNAME2... != y] > Z$end[Z$...ROWNAME2... == y], Z$end[Z$...ROWNAME2... == y], Z$end[Z$...ROWNAME2... != y])  
      
      # get proportion of overlap as the proportional duration of other rows compare to target index 
      Z$prop.ovlp <- (Z$end - Z$start) / Z$duration[Z$...ROWNAME2... == y]
      
      # set own overlap as NA
      Z$prop.ovlp[Z$...ROWNAME2... == y] <- NA
      
      # put mean and max overlap in data frame
      out <- data.frame(sound.files = x, selec = Z$selec[Z$...ROWNAME2... == y], number.ovlp.sels = nrow(Z) - 1, mean.prop.ovlp = mean(Z$prop.ovlp, na.rm = TRUE), max.prop.ovlp = max(Z$prop.ovlp, na.rm = TRUE))
      
      return(out)
      })
   
  # put togehter as data frame
  ovlp.df <- do.call(rbind, ovlp.info)
  
  if (any(is.na(Y$indx.row)))
  {
    non.ovlp.df <- data.frame(sound.files = Y$sound.files[is.na(Y$indx.row)], selec = Y$selec[is.na(Y$indx.row)], number.ovlp.sels = 0, mean.prop.ovlp = 0, max.prop.ovlp = 0)
  
  ovlp.df <- rbind(ovlp.df, non.ovlp.df)
  }
  
    } else # if no overlapping sels
    ovlp.df <- data.frame(sound.files = Y$sound.files, selec = Y$selec, number.ovlp.sels = 0, mean.prop.ovlp = 0, max.prop.ovlp = 0)
 
    return(ovlp.df)
     }  
    
  pbapply::pboptions(type = ifelse(pb, "timer", "none"))

# set clusters for windows OS
if (Sys.info()[1] == "Windows" & parallel > 1)
  cl <- parallel::makePSOCKcluster(getOption("cl.cores", parallel)) else cl <- parallel

      if (pb) write(file = "", x = "\nmeasuring proportional overlap (step 2 of 2):") 

  # loop over each sound file  
  ovlp.dfs <- pbapply::pblapply(X = unique(X$sound.files), cl = cl, FUN = prop.ovlp.FUN)

  # put togehter as data frame
  ovlp.info <- do.call(rbind, ovlp.dfs)
  
    # rename rows
  rownames(ovlp.info) <- X$...ROWNAME2...
  
  # re order as in 'X' and remove ...ROWNAME2... column
  ovlp.info <- ovlp.info[na.omit(match(paste(X$sound.files, X$selec), paste(ovlp.info$sound.files, ovlp.info$selec))), names(ovlp.info) != "...ROWNAME2..."]
  
  return(ovlp.info)
}


# get similar species names
source('~/Dropbox/Documentos_R/Functions/fuzzy search of species names.R')

# random sound
source('~/Dropbox/R package testing/warbleR/Beta functions/random_sound.R')
rs <- function() random_sound(dur = 2, segment.dur.range = c(0.01, 0.9), frange = c(1, 2))

source('~/Dropbox/warbleR/R/phylo_spectro.R')

# parameters ########
options("digits" = 5, "digits.secs" = 5, knitr.table.format = "html") 

cols <- brewer.pal(10,"Spectral")

# read species account data to get 
ggl_dcs <- gs_ls(verbose = FALSE)
sa <- gs_key(x = "1_U3OmwVIzRF6NG6LwvyVHBrc93MJnqt80hveAVncB4Y", verbose = FALSE)
sp_acc <- gs_read(ss = sa, ws = gs_ws_ls(sa)[1], verbose = FALSE)
sp_acc$species <- sp_acc$`Updated species name`
sp_acc$species_uscr <- gsub(" ", "_", sp_acc$species)

db_nms <- data.frame(db_nm =  c("Amazilia_wagneri", "Basilinna_leucotis", "Basilinna_xantusii", "Campylopterus_pampa", "Chlorostilbon_aureoventris", "Cynanthus_doubledayi", "Lampornis_cinereicauda", "Stellula_calliope", "Damophila_julie", "Trochilus_scitulus", "Chlorostilbon_salvini", "Glaucis_hirsuta", "Oreotrochilus_stolzmani", "Thalurania_fannyi", "Amazilia_chionopectus", "Chlorostilbon_swains", "Amazilia_saucerrottei", "Lesbia_victoria", "Hylocharis_saphirina",  "Aphantochroa_cirrhochloris", "Oxypogon_stuebelii", "Doryfera_ludoviciae", "Campylopterus_carvipennis", "Amazilia_yucatenensis", "Heliactin_cornuta", "Glaucis_aenea", "Calypte_helenae", "Campylopterus_cirrochloris", "Lampornis_castaneoventris_caloleama", "Colibri_thalassinus_cyanotus", "Schistes_geoffroyi_albogularis", "Phaethornis_guy_coruscus"), 
                           clm_nm = c("Amazilia_viridifrons", "Hylocharis_leucotis", "Hylocharis_xantusii", "Campylopterus_curvipennis", "Chlorostilbon_lucidus", "Cynanthus_latirostris", "Lampornis_calolaemus", "Selasphorus_calliope", "Juliamyia_julie", "Trochilus_polytmus", "Chlorostilbon_canivetii", "Glaucis_hirsutus", "Oreotrochilus_estella", "Thalurania_colombica", "Amazilia_brevirostris", "Chlorostilbon_swainsonii", "Amazilia_saucerottei", "Lesbia_victoriae", "Hylocharis_sapphirina", "Aphantochroa_cirrochloris", "Oxypogon_stubelii", "Doryfera_ludovicae", "Campylopterus_curvipennis" , "Amazilia_yucatanensis", "Heliactin_bilophus", "Glaucis_aeneus", "Mellisuga_helenae", "Aphantochroa_cirrochloris", "Lampornis_calolaemus", "Colibri_cyanotus", "Schistes_geoffroyi", "Phaethornis_guy"), stringsAsFactors = F)

db_nms <- db_nms[order(db_nms$db_nm), ]

warbleR_options(sound.sel.path = "/home/m/Dropbox/Projects/Hummingbird song evolution/sound selection files/MARCELO USE ONLY/finished (linux)", wav.path = "/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/Recordings/", wl = 300, flim = "frange", ovl = 70, parallel = detectCores() -1)

```

```{r move finished sound selection tables, echo = FALSE, eval = FALSE}

fnshd <- list.files(path = "./sound selection files/finished/")

chkd <- list.files(path = "./sound selection files/MARCELO USE ONLY/finished (linux)/")

fnshd[!fnshd %in% chkd]

if (length(fnshd[!fnshd %in% chkd]) > 0)
{
file.copy(from = file.path("./sound selection files/finished/", fnshd[!fnshd %in% chkd]), to = file.path("./sound selection files/MARCELO USE ONLY/", fnshd[!fnshd %in% chkd]))

fix_path(dest.path = "/home/m/Dropbox/Projects/Hummingbird song evolution/sound selection files/MARCELO USE ONLY/finished (linux)/", path = "/home/m/Dropbox/Projects/Hummingbird song evolution/sound selection files/MARCELO USE ONLY/", new.begin.path = "/home/m/Desktop/hummer_recordings", sound.file.col = "Begin File")

# unlink(file.path("./sound selection files/MARCELO USE ONLY/", fnshd[!fnshd %in% chk]))
}
```

```{r checking analyzed species, message = FALSE, warning = FALSE, echo = FALSE, eval = FALSE}

# already checked
anlzd <- list.files(path = "./sound selection files/MARCELO USE ONLY/finished (linux)/")

anlzd <- gsub(".sound.selection.txt", "", anlzd)

# get not analyzed from Ximena and Juliana
xmn <- list.files(path = "./sound selection files/Ximena/")
jln <- list.files(path = "./sound selection files/Juliana/")

nt.anlzd <- c(xmn, jln)

nt.anlzd <- gsub(".sound.selection.txt", "", nt.anlzd)

# any repeated species
if (length(base::intersect(nt.anlzd, anlzd)) > 0) {
  print("some species in both groups")
  base::intersect(nt.anlzd, anlzd)
  }


# read google drive data
# sa <- gs_key(x = "1_U3OmwVIzRF6NG6LwvyVHBrc93MJnqt80hveAVncB4Y", verbose = FALSE)
# sp_acc <- gs_read(ss = sa, ws = gs_ws_ls(sa)[1], verbose = FALSE)
sp_acc <- sp_acc[!is.na(sp_acc$`Original species name`), ]
sp_acc$Species <- sp_acc$`Updated species name`


#check if all species in species account have a sound file selection
no.snd.sel <- sp_acc[!sp_acc$Species %in% c(anlzd, nt.anlzd), ]
no.snd.sel <- no.snd.sel[no.snd.sel$`Check status` != "OK-no recs", ]
if (nrow(no.snd.sel) > 0) {
  print("some species don't have a sound file selection")
  no.snd.sel$Species
}

#check if species analyzed are found in finished folder
fns.sp.acc <- sp_acc[grep("OK", sp_acc$`Check status`), ]
fnsh.snd.sel <- fns.sp.acc[fns.sp.acc$Species %in% setdiff(fns.sp.acc$Species, anlzd), ]
fnsh.snd.sel <- fnsh.snd.sel[fnsh.snd.sel$`Check status` != "OK-no recs", ]

if (nrow(fnsh.snd.sel) > 0) {
  print("some analyzed species are found in finished folder")
  fnsh.snd.sel$Species
}

# total species checked
sum(grepl("OK", sp_acc$`Check status`) & !is.na(sp_acc$`Check status`))

# total species checked
sum(sp_acc$`Check status` == "OK" & !is.na(sp_acc$`Check status`))

# total species checked with no songs/recs
sum(grepl("OK-", sp_acc$`Check status`) & !is.na(sp_acc$`Check status`))

# check which ones are finished but not checked
nt.chckd <- sp_acc[grep("^OK", sp_acc$`Check status`, invert = TRUE),]
nt.chckd <- nt.chckd[!is.na(nt.chckd$`Check status`), ]
nt.chckd <- nt.chckd[order(nt.chckd$`Check status`), ]

# View(nt.chckd)

# nt.chckd.mg <- nt.chckd[nt.chckd$`Doubled-checked by` == "Megan Barkdull" & !is.na(nt.chckd$`Doubled-checked by`), ]
# View(nt.chckd.mg)
```

## Impute species only in birdtree
```{r looking at 294 McGuire 2018 species phylogeny, eval = F, echo = F}

tr294 <- read.tree("hum294_correctedIDs_Mcguire2018.tre")
tr294$tip.label <- paste(sapply(strsplit(tr294$tip.label, "\\."), "[[", 1), sapply(strsplit(tr294$tip.label, "\\."), "[[", 2), sep = "_")

tr294$tip.label <- spCap(tr294$tip.label, "_")

for(i in tr294$tip.label)
if(i %in% db_nms$db_nm)
  tr294$tip.label[tr294$tip.label == i] <- db_nms$clm_nm[db_nms$db_nm == i]


# remove the ones with "sp" in epithet
tr294 <- drop.tip(tr294, tip = c(tr294$tip.label[(sapply(strsplit(tr294$tip.label, "_"), "[[", 2) %in% c("sp", "stolzmani", "saucerottia", "scitulus"))]))

spdf <- data.frame(gen = sapply(strsplit(tr294$tip.label, "_"), "[[", 1), sp = sapply(strsplit(tr294$tip.label, "_"), "[[", 2), stringsAsFactors = F)

spdf$gen[grep("Phaeth", spdf$gen)] <- "Phaethornis"
spdf$gen[grep("Anthrac", spdf$gen)] <- "Anthracothorax"
spdf$gen[grep("Boisson", spdf$gen)] <- "Boissonneaua"
spdf$gen[grep("Coel", spdf$gen)] <- "Coeligena"

spdf$gen[grep("Lamporn", spdf$gen)] <- "Lampornis"
spdf$gen[grep("Oreotroch", spdf$gen)] <- "Oreotrochlus"
spdf$gen[grep("Eriocn", spdf$gen)] <- "Eriocnemis"
spdf$gen[grep("Thalur", spdf$gen)] <- "Thaluraria"
spdf$gen[grep("Chlorostil", spdf$gen)] <- "Chlorostilbon"
spdf$gen[grep("Chalco", spdf$gen)] <- "Chalcostigma"

tr294$tip.label <- paste(spdf$gen, spdf$sp, sep = "_")

# bird.tree <- drop.tip(bird.tree, c("Thalurania_fannyi", "Amaurornis_cinerea", "Oreotrochilus_stolzmani", "Cynanthus_doubledayi", "Chlorostilbon_salvini", "Chlorostilbon_aureoventris", "Trochilus_scitulus", "Amazilia_chionopectus"))

tr294$tip.label[tr294$tip.label == "Amazilia_vfrons"] <- "Amazilia_viridifrons"
tr294$tip.label[tr294$tip.label == "Amazilia_saucer"] <- "Amazilia_saucerottei"
tr294$tip.label[tr294$tip.label == "Phaethornis_griseo"] <- "Phaethornis_griseogularis"
tr294$tip.label[tr294$tip.label == "Avocettula_recurv"] <- "Avocettula_recurvirostris"
tr294$tip.label[tr294$tip.label == "Arch_alexandri"] <- "Archilochus_alexandri"
tr294$tip.label[tr294$tip.label == "Calliphlox_amet"] <- "Calliphlox_amethystina"
tr294$tip.label[tr294$tip.label == "Chlorostilbon_assim"] <- "Chlorostilbon_assimilis"
tr294$tip.label[tr294$tip.label == "Chlorostilbon_pucherani"] <- "Chlorostilbon_lucidus"
tr294$tip.label[tr294$tip.label == "Clytolaema_rubr"] <- "Clytolaema_rubricauda"
tr294$tip.label[tr294$tip.label == "Lampornis_ameth"] <- "Lampornis_amethystinus"
tr294$tip.label[tr294$tip.label == "Lepidopyga_coeruleo"] <- "Lepidopyga_coeruleogularis"
tr294$tip.label[tr294$tip.label == "Phaethornis_syrmat"] <- "Phaethornis_syrmatophorus"
tr294$tip.label[tr294$tip.label == "Phaethornis_supercil"] <- "Phaethornis_superciliosus"

fix.tips.bt <- fux.tax.search(qwords = tr294$tip.label, sep = "_", parallel = 1, top = 1, clements = T)

# fix.tips.bt <- fix.tips.bt[]

df.bt <- data.frame(labels = tr294$tip.label, fix.tips.bt, equal = fix.tips.bt == tr294$tip.label)

df.bt[!df.bt$equal, ]

# not finished (used the 281 spp instead)

tr294$tip.label <- fix.tips.bt


tr280 <- drop.tip(tr294, which(duplicated(tr294$tip.label)))

write.tree(tr280, "hum280_cured_correctedIDs_Mcguire2018.tre")

```

```{r fix names MCMC posterior trees, eval = FALSE, echo = FALSE}

post.trees <- read.nexus(file = "hum_MT_logcomb_reID.trees")

tr294 <- post.trees[[1]]

# out <- lapply(post.trees, function(x) x$tip.label)
# 
# out <- unlist(out)
# 
# names(out) <- NULL
# 
# unique(out)
# 
# 
# range(sapply(post.trees, Ntip))

multi.sp.names <- data.frame(org = post.trees[[1]]$tip.label, stringsAsFactors = FALSE)

multi.sp.names$fix.1 <- paste(sapply(strsplit(tr294$tip.label, "\\."), "[[", 1), sapply(strsplit(tr294$tip.label, "\\."), "[[", 2), sep = "_")

multi.sp.names$fix.2 <- spCap(multi.sp.names$fix.1, "_")

multi.sp.names$fix.3 <- multi.sp.names$fix.2

for(i in 1:nrow(multi.sp.names))
if(multi.sp.names$fix.3[i] %in% db_nms$db_nm)
  multi.sp.names$fix.3[i] <- db_nms$clm_nm[db_nms$db_nm == multi.sp.names$fix.3[i]]

# drop species
multi.sp.names <- multi.sp.names[!sapply(strsplit(multi.sp.names$fix.3, "_"), "[[", 2) %in% c("sp", "stolzmani", "saucerottia", "scitulus", "vanikor"),]

multi.sp.names <- multi.sp.names[!multi.sp.names$fix.3 %in% c("Caprimulgus_longirostris", "Chlores_not", "Chlorostilbon_aureoventris", "Coturnix_chinensis", "Lepido_coerul", "Selas_sasin", "Thal_fannyi", "Troch_poly", "Aegotheles_insignis", "Myrmotherula_brachyura", "Aerodram_salangana", "Corvus_frugilegus", "Aeronautes_saxatalis", "Hemiprocne_mystacea", "Streptoprocne_zonaris", "Streptoproc_zonaris", "Gallus_gallus", "Nyctibius_bracteatus", "Podargus_strigoides", "Steatornis_caripensis"),]

spdf <- data.frame(gen = sapply(strsplit(multi.sp.names$fix.3, "_"), "[[", 1), sp = sapply(strsplit(multi.sp.names$fix.3, "_"), "[[", 2), stringsAsFactors = F)

spdf$gen[grep("Phaeth", spdf$gen)] <- "Phaethornis"
spdf$gen[grep("Anthrac", spdf$gen)] <- "Anthracothorax"
spdf$gen[grep("Boisson", spdf$gen)] <- "Boissonneaua"
spdf$gen[grep("Coel", spdf$gen)] <- "Coeligena"
spdf$gen[grep("Lamporn", spdf$gen)] <- "Lampornis"
spdf$gen[grep("Oreotroch", spdf$gen)] <- "Oreotrochlus"
spdf$gen[grep("Eriocn", spdf$gen)] <- "Eriocnemis"
spdf$gen[grep("Thalur", spdf$gen)] <- "Thaluraria"
spdf$gen[grep("Chlorostil", spdf$gen)] <- "Chlorostilbon"
spdf$gen[grep("Chalco", spdf$gen)] <- "Chalcostigma"

multi.sp.names$fix.5 <- multi.sp.names$fix.4 <- paste(spdf$gen, spdf$sp, sep = "_")

multi.sp.names$fix.5[multi.sp.names$fix.5 == "Amazilia_vfrons"] <- "Amazilia_viridifrons"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Amazilia_saucer"] <- "Amazilia_saucerottei"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Phaethornis_griseo"] <- "Phaethornis_griseogularis"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Avocettula_recurv"] <- "Avocettula_recurvirostris"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Arch_alexandri"] <- "Archilochus_alexandri"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Calliphlox_amet"] <- "Calliphlox_amethystina"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Chlorostilbon_assim"] <- "Chlorostilbon_assimilis"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Chlorostilbon_pucherani"] <- "Chlorostilbon_lucidus"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Clytolaema_rubr"] <- "Clytolaema_rubricauda"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Lampornis_ameth"] <- "Lampornis_amethystinus"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Lepidopyga_coeruleo"] <- "Lepidopyga_coeruleogularis"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Phaethornis_syrmat"] <- "Phaethornis_syrmatophorus"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Phaethornis_supercil"] <- "Phaethornis_superciliosus"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Troch_poly"] <- "Trochilus_polytmus"
multi.sp.names$fix.5[multi.sp.names$fix.5 == "Aglaeact_castel"] <- "Aglaeactis_castelnaudii"

fix.tips.bt <- fux.tax.search(qwords = multi.sp.names$fix.5, sep = "_", parallel = 1, top = 1, clements = T)

# fix.tips.bt <- fix.tips.bt[]

df.bt <- data.frame(labels = multi.sp.names$fix.5, fix.tips.bt, equal = fix.tips.bt == multi.sp.names$fix.5)

df.bt[!df.bt$equal, ]

multi.sp.names$fix.5 <- df.bt$fix.tips.bt



post.trees <- pblapply(post.trees, cl = 3, function(x) {
  x <- drop.tip(x, tip = x$tip.label[!x$tip.label %in% multi.sp.names$org])
  
  sp.nms <- as.character(multi.sp.names$fix.5[match(x$tip.label, multi.sp.names$org)])
  
  sp.nms[duplicated(sp.nms)] <-
  paste("remove", 1:sum(duplicated(sp.nms)))
  
  x$tip.label <- sp.nms
  
  x <- drop.tip(x, tip = grep("remove", x$tip.label))
})

class(post.trees) <- "multiPhylo"

# post.trees2 <- post.trees 
# class(post.trees2) <- "list"
# 
# 
# write.nexus(post.trees2, "Posterior trees fixed names 283 species 1 swift.trees")

write.tree(post.trees, "Posterior trees fixed names 283 species 1 swift.trees")

```

```{r extract tree to compare bird tree phylogeny, echo = FALSE, eval = FALSE}

#bird.tree phylogeny
# bird.trees <- read.nexus("bird.tree.hummer.phylo.1000.trees.nex")
# 
# ## consensus tree
# # taken from http://blog.phytools.org/2016/03/method-to-compute-consensus-edge.html
# bird.tree <- phytools::consensus.edges(bird.trees, method="least.squares")
# 
# bird.tree2 <- phangorn::maxCladeCred(bird.trees)
# 
# ape::write.tree(bird.tree, "consensus.bird.tree.nex")
# ape::write.tree(bird.tree2, "consensus.bird.tree.max.cred.nex")

bird.tree <- read.tree("consensus.bird.tree.max.cred.nex")

bird.tree <- drop.tip(bird.tree, c("Thalurania_fannyi", "Trochilus_scitulus", "Augastes_lumachella", "Augastes_scutatus"))
bird.tree$tip.label[bird.tree$tip.label == "Stellula_calliope"] <- "Selasphorus_calliope"
bird.tree$tip.label[bird.tree$tip.label == "Damophila_julie"] <- "Juliamyia_julie"

fix.tips.bt <- fux.tax.search(qwords = bird.tree$tip.label, sep = "_", parallel = 1, top = 1, clements = T)

df.bt <- data.frame(fix.tips.bt, labels = bird.tree$tip.label, equal = fix.tips.bt == bird.tree$tip.label)

# df.bt[!df.bt$equal , ]

bird.tree$tip.label <- fix.tips.bt

# remove the ones not in data set
# bird.tree <- drop.tip(bird.tree, setdiff(bird.tree$tip.label, sp_acc$species_uscr))

# remove the ones with no songs

# McGuire phylogeny
# tr281 <- read.tree("hmmingbird_phylo_281sp_fixed_names_non_duplic.tre")
tr280 <- read.tree("hum280_cured_correctedIDs_Mcguire2018.tre")

# add clade to phylogeny
tr280$clade <- sapply(tr280$tip.label, function(x) sp_acc$Clade[sp_acc$species_uscr == x], USE.NAMES = FALSE)

bird.tree$clade <- sapply(sapply(strsplit(bird.tree$tip.label, "_"), "[[", 1), function(x) sp_acc$Clade[sapply(strsplit(sp_acc$species_uscr, "_"), "[[", 1) == x][1], USE.NAMES = FALSE)

# add tip label color for plotting to phylogeny (black = already checked)
tr280$tip.col <- ifelse(tr280$tip.label %in% bird.tree$tip.label, "black", cols[1])
bird.tree$tip.col <- ifelse(bird.tree$tip.label %in% tr280$tip.label, "black", cols[1])

## add patagona to mountain gems (just for convinience as mntn gems is a small clade)
tr280$clade[tr280$tip.label == "Patagona_gigas"] <- "Mtn. Gems"
bird.tree$clade[bird.tree$tip.label == "Patagona_gigas"] <- "Mtn. Gems"

clade_trees <- lapply(unique(tr280$clade), function(x) drop.tip(phy = tr280, tip = tr280$tip.label[tr280$clade != x]))
bt_clade_trees <- lapply(unique(tr280$clade), function(x) drop.tip(phy = bird.tree, tip = bird.tree$tip.label[bird.tree$clade != x]))

names(bt_clade_trees) <- names(clade_trees) <- unique(tr280$clade)

bt_clade_trees$`Mtn. Gems`$clade <- clade_trees$`Mtn. Gems`$clade  <- "Mtn. Gems + Patagona"
names(bt_clade_trees)[6] <- names(clade_trees)[6] <- "Mtn. Gems + Patagona"

nms <- names(clade_trees)

clade_trees <- lapply(1:length(clade_trees), function(x) {
  X <- clade_trees[[x]]
  X$tip.col <- X$tip.col[X$clade == names(clade_trees)[x]]
  X$pie.col <- X$pie.col[X$clade == names(clade_trees)[x]]
return(X)
  })

bt_clade_trees <- lapply(1:length(bt_clade_trees), function(x) {
  X <- bt_clade_trees[[x]]
  X$tip.col <- X$tip.col[X$clade == names(bt_clade_trees)[x]]
  X$pie.col <- X$pie.col[X$clade == names(bt_clade_trees)[x]]
return(X)
  })

names(bt_clade_trees) <- names(clade_trees) <- nms

compare_trees <- list(bt_clade_trees = bt_clade_trees, clade_trees = clade_trees, tr280 = tr280, bird.tree = bird.tree)

saveRDS(compare_trees, "trees for comparing bird.tree and McGuire tree.RDS")
```

```{r compare bird tree phylogeny, echo = FALSE, eval = FALSE, fig.width = 12, fig.height= 10, warning=F, message=F}

trees <- readRDS("trees for comparing bird.tree and McGuire tree.RDS")

bt_clade_trees <- trees[[1]]

clade_trees <- trees[[2]]

# bt_clade_trees <- bt_clade_trees[match(names(clade_trees), names(bt_clade_trees))]

par(mar = c(0, 0, 3, 0), mfrow = c(1, 2))

for(i in 1:length(clade_trees)){

  cex <- if (30/Ntip(clade_trees[[i]]) > 1) 1 else 30/Ntip(clade_trees[[i]])
  if (names(clade_trees)[i] == "Emeralds") cex <- cex * 1.5
  
  # McGuire
  plot.phylo(ladderize(clade_trees[[i]]), cex = cex, edge.width = 2, edge.color = cols[i], tip.color = clade_trees[[i]]$tip.col, main = names(clade_trees)[i])

  # bird tree 
    plot.phylo(ladderize(bt_clade_trees[[i]]), cex = cex, edge.width = 2, edge.color = cols[i], tip.color = bt_clade_trees[[i]]$tip.col)

    }

```

```{r imputing bird tree species, echo = FALSE, eval = FALSE, fig.width = 12, fig.height= 10, warning=F, message=F}

trees <- readRDS("trees for comparing bird.tree and McGuire tree.RDS")

tr280 <- trees[[3]]
bird.tree <- trees[[4]]

groupsDF <- data.frame(species=bird.tree$tip.label, group = unlist(lapply(strsplit(bird.tree$tip.label, "_"), "[", 1)), clade = bird.tree$clade, stringsAsFactors = FALSE)

## add Splits not in birdtree
splits.df <- data.frame(species = c("Calliphlox_lyrura", "Colibri_cyanotus", "Oxypogon_lindenii",  "Oxypogon_stubelii", "Phaethornis_aethopygus", "Stephanoxis_loddigesii", "Eugenes_spectabilis"), group = NA, clade = c("Bees", "Mangoes", "Coquettes", "Coquettes", "Hermits", "Emeralds", "Mtn. Gems"))

# add to main df
groupsDF <- rbind(groupsDF, splits.df) 

# set group to NA
groupsDF$group <- NA

# fix for Threnetes leucurus
groupsDF$group[groupsDF$species %in% c("Threnetes_niger", "Threnetes_leucurus")] <- "T.niger.clade"

# fix for Glaucis dornhii
groupsDF$group[groupsDF$species %in% c("Glaucis_dohrnii", "Glaucis_aeneus")] <- "G.dohrnii.clade"

# fix for Phaethornis_stuarti
groupsDF$group[groupsDF$species %in% c("Phaethornis_stuarti", "Phaethornis_longuemareus")] <- "P.stuarti.clade"

# fix for Phaethornis_squalidus
groupsDF$group[groupsDF$species %in% c("Phaethornis_squalidus", "Phaethornis_striigularis", "Phaethornis_griseogularis")] <- "P.squalidus.clade"

# fix for Phaethornis_idaliae
groupsDF$group[groupsDF$species %in% c("Phaethornis_idaliae", "Phaethornis_philippii", "Phaethornis_philippii")] <- "P.idaliae.clade"

# fix for Aglaeactis_aliciae
groupsDF$group[groupsDF$species %in% c("Aglaeactis_aliciae", "Aglaeactis_castelnaudii")] <- "A.aliciae.clade"

# fix for Haplophaedia_assimilis
groupsDF$group[groupsDF$species %in% c("Haplophaedia_assimilis", "Haplophaedia_aureliae")] <- "H.assimilis.clade"

# fix for Eriocnemis_godini
groupsDF$group[groupsDF$species %in% c("Eriocnemis_godini", "Eriocnemis_aline")] <- "E.godini.clade"

# fix for Eriocnemis_mirabilis
groupsDF$group[groupsDF$species %in% c("Eriocnemis_mirabilis", "Eriocnemis_glaucopoides")] <- "E.mirabilis.clade"

# fix for Eriocnemis_isabellae
groupsDF$group[groupsDF$species %in% c("Eriocnemis_isabellae", "Eriocnemis_mosquera", "Eriocnemis_nigrivestis", "Eriocnemis_vestita")] <- "E.isabellae.clade"

# fix for Discosura_letitiae
groupsDF$group[groupsDF$species %in% c("Discosura_letitiae", "Discosura_langsdorffi", "Discosura_popelairii")] <- "D.letitiae.clade"

# fix for Lophornis_ornatus Lophornis_helenae Lophornis_gouldii Lophornis_brachylophus Lophornis_stictolophus Lophornis_adorabilis
groupsDF$group[groupsDF$species %in% c("Lophornis_ornatus", "Lophornis_helenae", "Lophornis_magnificus", "Lophornis_gouldii", "Lophornis_brachylophus", "Lophornis_stictolophus", "Lophornis_adorabilis", "Lophornis_pavoninus", "Lophornis_chalybeus", "Lophornis_delattrei")] <- "L.ornatus.clade"


# fix for Lophornis_ornatus Lophornis_helenae Lophornis_gouldii Lophornis_brachylophus Lophornis_stictolophus Lophornis_adorabilis
groupsDF$group[groupsDF$species %in% c("Lophornis_ornatus", "Lophornis_gouldii", "Lophornis_brachylophus", "Lophornis_stictolophus", "Lophornis_adorabilis", "Lophornis_pavoninus", "Lophornis_delattrei")] <- "L.ornatus.clade"

# fix for Phlogophilus_hemileucurus
groupsDF$group[groupsDF$species %in% c("Phlogophilus_hemileucurus", "Phlogophilus_harterti")] <- "P.hemileucurus.clade"

# fix for Heliangelus_mavors
groupsDF$group[groupsDF$species %in% c("Heliangelus_mavors", "Heliangelus_micraster", "Heliangelus_exortis")] <- "H.mavors.clade"

# fix for Aglaiocercus_berlepschi
groupsDF$group[groupsDF$species %in% c("Aglaiocercus_berlepschi", "Aglaiocercus_kingii")] <- "A.berlepschi.clade"

# fix for Ramphomicron_dorsale
groupsDF$group[groupsDF$species %in% c("Ramphomicron_dorsale", "Ramphomicron_microrhynchum")] <- "R.microrhynchum.clade"

# fix for Oreotrochilus_adela
groupsDF$group[groupsDF$species %in% c("Oreotrochilus_adela", "Oreotrochilus_estella", "Oreotrochilus_chimborazo", "Oreotrochilus_melanogaster")] <- "O.adela.clade"

# fix for Chalcostigma_heteropogon
groupsDF$group[groupsDF$species %in% c("Chalcostigma_heteropogon", "Chalcostigma_olivaceum")] <- "C.heteropogon.clade"

# fix for Metallura_iracunda
groupsDF$group[groupsDF$species %in% c("Metallura_iracunda", "Metallura_phoebe")] <- "M.iracunda.clade"

# fix for Eugenes_spectabilis
groupsDF$group[groupsDF$species %in% c("Eugenes_spectabilis", "Eugenes_fulgens")] <- "C.spectabilis.clade"

# fix for Calothorax_pulcher
groupsDF$group[groupsDF$species %in% c("Calothorax_pulcher", "Calothorax_lucifer")] <- "C.pulcher.clade"

# fix for Selasphorus_ardens
groupsDF$group[groupsDF$species %in% c("Selasphorus_ardens", "Selasphorus_flammula")] <- "C.ardens.clade"

# fix for Atthis_ellioti
groupsDF$group[groupsDF$species %in% c("Atthis_ellioti", "Atthis_heloisa")] <- "A.ellioti.clade"

# fix for Doricha_enicura
groupsDF$group[groupsDF$species %in% c("Doricha_enicura", "Doricha_eliza")] <- "D.enicura.clade"

# fix for Mellisuga_helenae
groupsDF$group[groupsDF$species %in% c("Mellisuga_helenae", "Mellisuga_minima")] <- "M.helenae.clade"

# fix for Chaetocercus_berlepschi
groupsDF$group[groupsDF$species %in% c("Chaetocercus_berlepschi", "Chaetocercus_mulsant")] <- "C.berlepschi.clade"

## add 2 as they are sisters to each other
# fix for Chaetocercus_astreans Chaetocercus_heliodor
groupsDF$group[groupsDF$species %in% c("Chaetocercus_astreans", "Chaetocercus_heliodor","Chaetocercus_bombus")] <- "C.astreans.clade"

# fix for Hylocharis_humboldtii
groupsDF$group[groupsDF$species %in% c("Hylocharis_humboldtii", "Hylocharis_xantusii")] <- "H.humboldtii.clade"

# fix for Chlorostilbon_russatus
groupsDF$group[groupsDF$species %in% c("Chlorostilbon_russatus", "Chlorostilbon_maugaeus")] <- "C.russatus.clade"

# fix for Chlorostilbon_gibsoni
groupsDF$group[groupsDF$species %in% c("Chlorostilbon_gibsoni", "Cyanophaia_bicolor")] <- "C.gibsoni.clade"

# fix for Campylopterus_curvipennis
groupsDF$group[groupsDF$species %in% c("Campylopterus_curvipennis", "Campylopterus_hemileucurus")] <- "C.curvipennis.clade"

# fix for Campylopterus_phainopeplus
groupsDF$group[groupsDF$species %in% c("Campylopterus_phainopeplus", "Campylopterus_duidae", "Campylopterus_largipennis")] <- "C.phainopeplus.clade"

# fix for Hylonympha_macrocerca
groupsDF$group[groupsDF$species %in% c("Hylonympha_macrocerca", "Eupherusa_poliocerca", "Eupherusa_cyanophrys", 
                                       "Eupherusa_eximia", "Eupherusa_nigriventris")] <- "H.macrocerca.clade"

# fix for Sternoclyta_cyanopectus
groupsDF$group[groupsDF$species %in% c("Sternoclyta_cyanopectus", "Taphrospilus_hypostictus")] <- "S.cyanopectus.clade"

# fix for Amazilia_boucardi
groupsDF$group[groupsDF$species %in% c("Amazilia_boucardi", "Abeillia_abeillei")] <- "A.boucardi.clade"

# fix for Lepidopyga_lilliae
groupsDF$group[groupsDF$species %in% c("Lepidopyga_lilliae", "Lepidopyga_goudoti")] <- "L.lilliae.clade"

# fix for Amazilia_luciae
groupsDF$group[groupsDF$species %in% c("Amazilia_luciae", "Trochilus_polytmus", "Hylocharis_sapphirina")] <- "A.luciae.clade"

#NOT FROM BIRDTREE
# fix for Colibri_cyanotus
groupsDF$group[groupsDF$species %in% c("Colibri_cyanotus", "Colibri_thalassinus")] <- "C.cyanotus.clade"

# fix for Calliphlox_lyrura
groupsDF$group[groupsDF$species %in% c("Calliphlox_lyrura", "Calliphlox_evelynae")] <- "C.lylura.clade"

# fix for Oxypogon_lindenii and Oxypogon_stubelii
groupsDF$group[groupsDF$species %in% c("Oxypogon_lindenii", "Oxypogon_guerinii", "Oxypogon_stubelii")] <- "O.lindenii.clade"

# fix for Phaethornis_aethopygus
#based on "Hybrid, Subspecies, or Species? The Validity and Taxonomic Status of Phaethornis longuemareus aethopyga (Trochilidae)"
groupsDF$group[groupsDF$species %in% c("Phaethornis_aethopygus", "Phaethornis_atrimentalis")] <- "P.aethopygus.clade"

# fix for Stephanoxis_loddigesii
groupsDF$group[groupsDF$species %in% c("Stephanoxis_loddigesii", "Stephanoxis_lalandi")] <- "S.loddigesii.clade"


groupsDF <- groupsDF[!is.na(groupsDF$group), ]

addtaxa.out <- addTaxa(tree = tr280, groupings = groupsDF, no.trees = 100)

tr323 <- phangorn::maxCladeCred(addtaxa.out[[1]])

```

```{r impute round 2, eval=F, echo = F}

### second round ####
groupsDF2 <- data.frame(species=bird.tree$tip.label,group = unlist(lapply(strsplit(bird.tree$tip.label, "_"), "[", 1)), clade = bird.tree$clade, stringsAsFactors = FALSE)

groupsDF2$group <- NA

# fix for Anopetia
groupsDF2$group[groupsDF2$species %in% c("Anopetia_gounellei", "Glaucis_hirsutus", "Glaucis_dohrnii", "Glaucis_aeneus")] <- "Anopetia.clade"

# fix for Oreotrochilus_leucopleurus
groupsDF2$group[groupsDF2$species %in% c("Oreotrochilus_leucopleurus", "Oreotrochilus_adela", "Oreotrochilus_estella", "Oreotrochilus_chimborazo", "Oreotrochilus_melanogaster")] <- "O.leucopleurus.clade"

# fix for Chaetocercus_jourdanii
groupsDF2$group[groupsDF2$species %in% c("Chaetocercus_jourdanii", "Chaetocercus_astreans", "Chaetocercus_heliodor","Chaetocercus_bombus")] <- "C.astreans.clade"

# fix for Chlorostilbon_olivaresi Chlorostilbon_stenurus Chlorostilbon_russatus
groupsDF2$group[groupsDF2$species %in% c("Chlorostilbon_olivaresi", "Chlorostilbon_stenurus", "Chlorostilbon_russatus", "Chlorostilbon_maugaeus")] <- "C.olivaresi.clade"

# fix for Chlorostilbon_alice
groupsDF2$group[groupsDF2$species %in% c("Chlorostilbon_alice", "Chlorostilbon_gibsoni", "Leucochloris_albicollis", "Cyanophaia_bicolor")] <- "C.alice.clade"

# fix for Chlorostilbon_auriceps
groupsDF2$group[groupsDF2$species %in% c("Chlorostilbon_auriceps", "Chlorostilbon_forficatus", "Chlorostilbon_melanorhynchus")] <- "C.auriceps.clade"

# fix for Amazilia_cyanifrons
groupsDF2$group[groupsDF2$species %in% c("Amazilia_cyanifrons", "Amazilia_candida", "Leucippus_chlorocercus", "Amazilia_castaneiventris", "Amazilia_leucogaster", "Leucippus_taczanowskii", "Goldmania_violiceps", "Amazilia_violiceps", "Amazilia_amazilia", "Amazilia_franciae", "Chrysuronia_oenone", "Amazilia_versicolor", "Hylocharis_grayi", "Lepidopyga_coeruleogularis", "Lepidopyga_goudoti", "Lepidopyga_lilliae", "Hylocharis_eliciae", "Hylocharis_cyanus", "Amazilia_edward", "Amazilia_brevirostris", "Amazilia_decora", "Amazilia_rosenbergi", "Amazilia_amabilis", "Hylocharis_chrysura", "Amazilia_luciae", "Trochilus_polytmus", "Hylocharis_sapphirina", "Amazilia_lactea", "Amazilia_fimbriata", "Amazilia_chionogaster", "Amazilia_viridicauda")] <- "A.cyanifrons.clade"

groupsDF2 <- groupsDF2[!is.na(groupsDF2$group), ]

addtaxa.out2 <- addTaxa(tree = tr323, groupings = groupsDF2, no.trees = 100)

tr339 <- phangorn::maxCladeCred(addtaxa.out2[[1]])

write.tree(tr339, "imputed hummer tree 339 spp.tre")


## make data frame with imputed species
# from bird tree
impute.bird.tree <- data.frame(source = "birdtree", species = c("Threnetes_niger", "Glaucis_dohrnii", "Phaethornis_stuarti", "Phaethornis_squalidus", "Phaethornis_idaliae", "Aglaeactis_aliciae", "Haplophaedia_assimilis", "Eriocnemis_godini", "Eriocnemis_mirabilis", "Eriocnemis_isabellae", "Discosura_letitiae", "Lophornis_ornatus", "Lophornis_helenae", "Lophornis_gouldii", "Lophornis_brachylophus", "Lophornis_stictolophus", "Lophornis_adorabilis", "Phlogophilus_hemileucurus", "Heliangelus_mavors", "Aglaiocercus_berlepschi", "Ramphomicron_dorsale", "Oreotrochilus_adela", "Chalcostigma_heteropogon", "Metallura_iracunda", "Eugenes_spectabilis", "Calothorax_pulcher", "Selasphorus_ardens", "Atthis_ellioti", "Doricha_enicura", "Chaetocercus_berlepschi", "Chaetocercus_astreans", "Chaetocercus_heliodor", "Hylocharis_humboldtii", "Chlorostilbon_russatus", "Chlorostilbon_gibsoni", "Campylopterus_curvipennis", "Campylopterus_phainopeplus", "Hylonympha_macrocerca", "Sternoclyta_cyanopectus", "Amazilia_boucardi", "Lepidopyga_lilliae", "Amazilia_luciae"))

# from other sources
impute.else <- data.frame(source = "else", species = c("Colibri_cyanotus", "Calliphlox_lyrura", "Oxypogon_lindenii", "Oxypogon_guerinii", "Phaethornis_aethopygus", "Stephanoxis_loddigesii", "Anopetia_gounellei", "Oreotrochilus_leucopleurus", "Chaetocercus_jourdanii", "Chlorostilbon_olivaresi", "Chlorostilbon_stenurus", "Chlorostilbon_russatus", "Chlorostilbon_alice", "Chlorostilbon_auriceps", "Amazilia_cyanifrons"))

impute.df <- rbind(impute.bird.tree, impute.else) 

impute.df <- impute.df[!duplicated(impute.df$species),]

write.csv(impute.df, "Imputed species by source hummingbirds.csv", row.names = FALSE)

```

```{r impute spp on posterior trees all species}

trees <- readRDS("trees for comparing bird.tree and McGuire tree.RDS")

# tr280 <- trees[[3]]

bird.tree <- trees[[4]]

post.trees <- read.tree("Posterior trees fixed names 283 species 1 swift.trees")

# sample 100 posterior trees
set.seed(10)
post.trees <- post.trees[sample(1:length(post.trees), 100)]

# setdiff(post.trees[[1]]$tip.label, tr280$tip.label)

no.trees <- 30
post.trees <- pblapply(post.trees, cl = 3, function(x){
  
  x <- drop.tip(x, tip = "Aglaeactis_aliciae")
  
  groupsDF <- data.frame(species=bird.tree$tip.label, group = unlist(lapply(strsplit(bird.tree$tip.label, "_"), "[", 1)), clade = bird.tree$clade, stringsAsFactors = FALSE)
  
  ## add Splits not in birdtree
  splits.df <- data.frame(species = c("Calliphlox_lyrura", "Colibri_cyanotus", "Oxypogon_lindenii",  "Oxypogon_stubelii", "Phaethornis_aethopygus", "Stephanoxis_loddigesii", "Eugenes_spectabilis"), group = NA, clade = c("Bees", "Mangoes", "Coquettes", "Coquettes", "Hermits", "Emeralds", "Mtn. Gems"))
  
  # add to main df
  groupsDF <- rbind(groupsDF, splits.df) 
  
  # set group to NA
  groupsDF$group <- NA
  
  # fix for Threnetes leucurus
  groupsDF$group[groupsDF$species %in% c("Threnetes_niger", "Threnetes_leucurus")] <- "T.niger.clade"
  
  # fix for Glaucis dornhii
  groupsDF$group[groupsDF$species %in% c("Glaucis_dohrnii", "Glaucis_aeneus")] <- "G.dohrnii.clade"
  
  # fix for Phaethornis_stuarti
  groupsDF$group[groupsDF$species %in% c("Phaethornis_stuarti", "Phaethornis_longuemareus")] <- "P.stuarti.clade"
  
  # fix for Phaethornis_squalidus
  groupsDF$group[groupsDF$species %in% c("Phaethornis_squalidus", "Phaethornis_striigularis", "Phaethornis_griseogularis")] <- "P.squalidus.clade"
  
  # fix for Phaethornis_idaliae
  groupsDF$group[groupsDF$species %in% c("Phaethornis_idaliae", "Phaethornis_philippii", "Phaethornis_philippii")] <- "P.idaliae.clade"
  
  # fix for Aglaeactis_aliciae
  groupsDF$group[groupsDF$species %in% c("Aglaeactis_aliciae", "Aglaeactis_castelnaudii")] <- "A.aliciae.clade"
  
  # fix for Haplophaedia_assimilis
  groupsDF$group[groupsDF$species %in% c("Haplophaedia_assimilis", "Haplophaedia_aureliae")] <- "H.assimilis.clade"
  
  # fix for Eriocnemis_godini
  groupsDF$group[groupsDF$species %in% c("Eriocnemis_godini", "Eriocnemis_aline")] <- "E.godini.clade"
  
  # fix for Eriocnemis_mirabilis
  groupsDF$group[groupsDF$species %in% c("Eriocnemis_mirabilis", "Eriocnemis_glaucopoides")] <- "E.mirabilis.clade"
  
  # fix for Eriocnemis_isabellae
  groupsDF$group[groupsDF$species %in% c("Eriocnemis_isabellae", "Eriocnemis_mosquera", "Eriocnemis_nigrivestis", "Eriocnemis_vestita")] <- "E.isabellae.clade"
  
  # fix for Discosura_letitiae
  groupsDF$group[groupsDF$species %in% c("Discosura_letitiae", "Discosura_langsdorffi", "Discosura_popelairii")] <- "D.letitiae.clade"
  
  # fix for Lophornis_ornatus Lophornis_helenae Lophornis_gouldii Lophornis_brachylophus Lophornis_stictolophus Lophornis_adorabilis
  groupsDF$group[groupsDF$species %in% c("Lophornis_ornatus", "Lophornis_helenae", "Lophornis_magnificus", "Lophornis_gouldii", "Lophornis_brachylophus", "Lophornis_stictolophus", "Lophornis_adorabilis", "Lophornis_pavoninus", "Lophornis_chalybeus", "Lophornis_delattrei")] <- "L.ornatus.clade"
  
  # fix for Lophornis_ornatus Lophornis_helenae Lophornis_gouldii Lophornis_brachylophus Lophornis_stictolophus Lophornis_adorabilis
  groupsDF$group[groupsDF$species %in% c("Lophornis_ornatus", "Lophornis_gouldii", "Lophornis_brachylophus", "Lophornis_stictolophus", "Lophornis_adorabilis", "Lophornis_pavoninus", "Lophornis_delattrei")] <- "L.ornatus.clade"
  
  # fix for Phlogophilus_hemileucurus
  # groupsDF$group[groupsDF$species %in% c("Phlogophilus_hemileucurus", "Phlogophilus_harterti")] <- "P.hemileucurus.clade"
  
  # fix for Heliangelus_mavors
  groupsDF$group[groupsDF$species %in% c("Heliangelus_mavors", "Heliangelus_micraster", "Heliangelus_exortis")] <- "H.mavors.clade"
  
  # fix for Aglaiocercus_berlepschi
  groupsDF$group[groupsDF$species %in% c("Aglaiocercus_berlepschi", "Aglaiocercus_kingii")] <- "A.berlepschi.clade"
  
  # fix for Ramphomicron_dorsale
  groupsDF$group[groupsDF$species %in% c("Ramphomicron_dorsale", "Ramphomicron_microrhynchum")] <- "R.microrhynchum.clade"
  
  # fix for Oreotrochilus_adela
  groupsDF$group[groupsDF$species %in% c("Oreotrochilus_adela", "Oreotrochilus_estella", "Oreotrochilus_chimborazo", "Oreotrochilus_melanogaster")] <- "O.adela.clade"
  
  # fix for Chalcostigma_heteropogon
  groupsDF$group[groupsDF$species %in% c("Chalcostigma_heteropogon", "Chalcostigma_olivaceum")] <- "C.heteropogon.clade"
  
  # fix for Metallura_iracunda
  groupsDF$group[groupsDF$species %in% c("Metallura_iracunda", "Metallura_phoebe")] <- "M.iracunda.clade"
  
  # fix for Eugenes_spectabilis
  groupsDF$group[groupsDF$species %in% c("Eugenes_spectabilis", "Eugenes_fulgens")] <- "C.spectabilis.clade"
  
  # fix for Calothorax_pulcher
  groupsDF$group[groupsDF$species %in% c("Calothorax_pulcher", "Calothorax_lucifer")] <- "C.pulcher.clade"
  
  # fix for Selasphorus_ardens
  groupsDF$group[groupsDF$species %in% c("Selasphorus_ardens", "Selasphorus_flammula")] <- "C.ardens.clade"
  
  # fix for Atthis_ellioti
  groupsDF$group[groupsDF$species %in% c("Atthis_ellioti", "Atthis_heloisa")] <- "A.ellioti.clade"
  
  # fix for Doricha_enicura
  groupsDF$group[groupsDF$species %in% c("Doricha_enicura", "Doricha_eliza")] <- "D.enicura.clade"
  
  # fix for Mellisuga_helenae
  groupsDF$group[groupsDF$species %in% c("Mellisuga_helenae", "Mellisuga_minima")] <- "M.helenae.clade"
  
  # fix for Chaetocercus_berlepschi
  groupsDF$group[groupsDF$species %in% c("Chaetocercus_berlepschi", "Chaetocercus_mulsant")] <- "C.berlepschi.clade"
  
  ## add 2 as they are sisters to each other
  # fix for Chaetocercus_astreans Chaetocercus_heliodor
  groupsDF$group[groupsDF$species %in% c("Chaetocercus_astreans", "Chaetocercus_heliodor","Chaetocercus_bombus")] <- "C.astreans.clade"
  
  # fix for Hylocharis_humboldtii
  groupsDF$group[groupsDF$species %in% c("Hylocharis_humboldtii", "Hylocharis_xantusii")] <- "H.humboldtii.clade"
  
  # fix for Chlorostilbon_russatus
  groupsDF$group[groupsDF$species %in% c("Chlorostilbon_russatus", "Chlorostilbon_maugaeus")] <- "C.russatus.clade"
  
  # fix for Chlorostilbon_gibsoni
  groupsDF$group[groupsDF$species %in% c("Chlorostilbon_gibsoni", "Cyanophaia_bicolor")] <- "C.gibsoni.clade"
  
  # fix for Campylopterus_curvipennis
  groupsDF$group[groupsDF$species %in% c("Campylopterus_curvipennis", "Campylopterus_hemileucurus")] <- "C.curvipennis.clade"
  
  # fix for Campylopterus_phainopeplus
  groupsDF$group[groupsDF$species %in% c("Campylopterus_phainopeplus", "Campylopterus_duidae", "Campylopterus_largipennis")] <- "C.phainopeplus.clade"
  
  # fix for Hylonympha_macrocerca
  groupsDF$group[groupsDF$species %in% c("Hylonympha_macrocerca", "Eupherusa_poliocerca", "Eupherusa_cyanophrys", 
                                         "Eupherusa_eximia", "Eupherusa_nigriventris")] <- "H.macrocerca.clade"
  
  # fix for Sternoclyta_cyanopectus
  groupsDF$group[groupsDF$species %in% c("Sternoclyta_cyanopectus", "Taphrospilus_hypostictus")] <- "S.cyanopectus.clade"
  
  # fix for Amazilia_boucardi
  groupsDF$group[groupsDF$species %in% c("Amazilia_boucardi", "Abeillia_abeillei")] <- "A.boucardi.clade"
  
  # fix for Lepidopyga_lilliae
  groupsDF$group[groupsDF$species %in% c("Lepidopyga_lilliae", "Lepidopyga_goudoti")] <- "L.lilliae.clade"
  
  # fix for Amazilia_luciae
  groupsDF$group[groupsDF$species %in% c("Amazilia_luciae", "Trochilus_polytmus", "Hylocharis_sapphirina")] <- "A.luciae.clade"
  
  #NOT FROM BIRDTREE
  # fix for Colibri_cyanotus
  groupsDF$group[groupsDF$species %in% c("Colibri_cyanotus", "Colibri_thalassinus")] <- "C.cyanotus.clade"
  
  # fix for Calliphlox_lyrura
  groupsDF$group[groupsDF$species %in% c("Calliphlox_lyrura", "Calliphlox_evelynae")] <- "C.lylura.clade"
  
  # fix for Oxypogon_lindenii and Oxypogon_stubelii
  groupsDF$group[groupsDF$species %in% c("Oxypogon_lindenii", "Oxypogon_guerinii", "Oxypogon_stubelii")] <- "O.lindenii.clade"
  
  # fix for Phaethornis_aethopygus
  #based on "Hybrid, Subspecies, or Species? The Validity and Taxonomic Status of Phaethornis longuemareus aethopyga (Trochilidae)"
  groupsDF$group[groupsDF$species %in% c("Phaethornis_aethopygus", "Phaethornis_atrimentalis")] <- "P.aethopygus.clade"
  
  # fix for Stephanoxis_loddigesii
  groupsDF$group[groupsDF$species %in% c("Stephanoxis_loddigesii", "Stephanoxis_lalandi")] <- "S.loddigesii.clade"
  
  
  groupsDF <- groupsDF[!is.na(groupsDF$group), ]
  
  addtaxa.out <- addTaxa(tree = x, groupings = groupsDF, no.trees = no.trees)
  
  tr.step1 <- phangorn::maxCladeCred(addtaxa.out[[1]])
    
  ### second round ####
  groupsDF2 <- data.frame(species=bird.tree$tip.label,group = unlist(lapply(strsplit(bird.tree$tip.label, "_"), "[", 1)), clade = bird.tree$clade, stringsAsFactors = FALSE)
  
  groupsDF2$group <- NA
  
  # fix for Anopetia
  groupsDF2$group[groupsDF2$species %in% c("Anopetia_gounellei", "Glaucis_hirsutus", "Glaucis_dohrnii", "Glaucis_aeneus")] <- "Anopetia.clade"
  
  # fix for Oreotrochilus_leucopleurus
  groupsDF2$group[groupsDF2$species %in% c("Oreotrochilus_leucopleurus", "Oreotrochilus_adela", "Oreotrochilus_estella", "Oreotrochilus_chimborazo", "Oreotrochilus_melanogaster")] <- "O.leucopleurus.clade"
  
  # fix for Chaetocercus_jourdanii
  groupsDF2$group[groupsDF2$species %in% c("Chaetocercus_jourdanii", "Chaetocercus_astreans", "Chaetocercus_heliodor","Chaetocercus_bombus")] <- "C.astreans.clade"
  
  # fix for Chlorostilbon_olivaresi Chlorostilbon_stenurus Chlorostilbon_russatus
  groupsDF2$group[groupsDF2$species %in% c("Chlorostilbon_olivaresi", "Chlorostilbon_stenurus", "Chlorostilbon_russatus", "Chlorostilbon_maugaeus")] <- "C.olivaresi.clade"
  
  # fix for Chlorostilbon_alice
  groupsDF2$group[groupsDF2$species %in% c("Chlorostilbon_alice", "Chlorostilbon_gibsoni", "Leucochloris_albicollis", "Cyanophaia_bicolor")] <- "C.alice.clade"
  
  # fix for Chlorostilbon_auriceps
  groupsDF2$group[groupsDF2$species %in% c("Chlorostilbon_forficatus", "Chlorostilbon_melanorhynchus")] <- "C.forficatus.clade"
  
  # fix for Amazilia_cyanifrons
  groupsDF2$group[groupsDF2$species %in% c("Amazilia_cyanifrons", "Amazilia_candida", "Leucippus_chlorocercus", "Amazilia_castaneiventris", "Amazilia_leucogaster", "Leucippus_taczanowskii", "Goldmania_violiceps", "Amazilia_violiceps", "Amazilia_amazilia", "Amazilia_franciae", "Chrysuronia_oenone", "Amazilia_versicolor", "Hylocharis_grayi", "Lepidopyga_coeruleogularis", "Lepidopyga_goudoti", "Lepidopyga_lilliae", "Hylocharis_eliciae", "Hylocharis_cyanus", "Amazilia_edward", "Amazilia_brevirostris", "Amazilia_decora", "Amazilia_rosenbergi", "Amazilia_amabilis", "Hylocharis_chrysura", "Amazilia_luciae", "Trochilus_polytmus", "Hylocharis_sapphirina", "Amazilia_lactea", "Amazilia_fimbriata", "Amazilia_chionogaster", "Amazilia_viridicauda")] <- "A.cyanifrons.clade"
  
  groupsDF2 <- groupsDF2[!is.na(groupsDF2$group), ]
  
  addtaxa.out2 <- addTaxa(tree = tr.step1, groupings = groupsDF2, no.trees = no.trees)
  
  tr.step2 <- phangorn::maxCladeCred(addtaxa.out2[[1]])
  
  return(tr.step2)
})

class(post.trees) <- "multiPhylo"

write.tree(post.trees, "Posterior trees fixed names 339 species 1 swift.trees")

```

```{r impute spp on posterior trees analyzed species}

# 100 posterior distribution trees of 339 hummingbirds species and 1 swift (Chaetura_pelagica)
humm.trees <- read.tree("Posterior trees fixed names 339 species 1 swift.trees")

sp <- read.csv("Element parameters hummingbirds and swifts.csv", stringsAsFactors = FALSE)

humms <- gsub(" ", "_", unique(sp$Species))


humm.trees <- pblapply(humm.trees, function(x) {
  
  x <- drop.tip(x, setdiff(x$tip.label, humms))
  
})

class(humm.trees) <- "multiPhylo"

write.tree(humm.trees, "100_trees_265_hummingbird_species_1_swift.trees")

```

```{r check if all clades are monophyletic clades, eval = FALSE, echo = FALSE}

humm.trees <- read.tree("100_trees_265_hummingbird_species_1_swift.trees")

sp <- read.csv("Element parameters hummingbirds and swifts.csv", stringsAsFactors = FALSE)

sp <- sp[!duplicated(sp$Species), ]

sp$Species <- gsub(" ", "_", sp$Species)

clds <- c("Emeralds", "Coquettes", "Brilliants", "Mangoes", "Hermits", "Bees", "Mtn. Gems", "Topazes")

mono.phys <- pbsapply(humm.trees, function(Y) {
  all(sapply(clds, function(x) is.monophyletic(Y, tips = sp$Species[sp$Clade == x])))
  }
)

```

```{r extract clade trees to compare bird tree phylogeny imputed, echo = FALSE, eval = FALSE}

#bird.tree phylogeny
bird.tree <- read.tree("consensus.bird.tree.max.cred.nex")

bird.tree <- drop.tip(bird.tree, c("Thalurania_fannyi", "Trochilus_scitulus", "Augastes_lumachella", "Augastes_scutatus"))
bird.tree$tip.label[bird.tree$tip.label == "Stellula_calliope"] <- "Selasphorus_calliope"
bird.tree$tip.label[bird.tree$tip.label == "Damophila_julie"] <- "Juliamyia_julie"

fix.tips.bt <- fux.tax.search(qwords = bird.tree$tip.label, sep = "_", parallel = 1, top = 1, clements = T)

df.bt <- data.frame(fix.tips.bt, labels = bird.tree$tip.label, equal = fix.tips.bt == bird.tree$tip.label)

# df.bt[!df.bt$equal , ]

bird.tree$tip.label <- fix.tips.bt

# tr281 <- read.tree("hmmingbird_phylo_281sp_fixed_names_non_duplic.tre")
tr280 <- read.tree("hum280_cured_correctedIDs_Mcguire2018.tre")
tr339 <- read.tree("imputed hummer tree 339 spp.tre")

# add clade to phylogeny
tr339$clade <- sapply(tr339$tip.label, function(x) sp_acc$Clade[sp_acc$species_uscr == x], USE.NAMES = FALSE)

tr339$clade <- gsub("Mtn. Gems", "Mtn. Gems + Patagona", tr339$clade)

bird.tree$clade <- sapply(sapply(strsplit(bird.tree$tip.label, "_"), "[[", 1), function(x) sp_acc$Clade[sapply(strsplit(sp_acc$species_uscr, "_"), "[[", 1) == x][1], USE.NAMES = FALSE)

bird.tree$clade <- gsub("Mtn. Gems", "Mtn. Gems + Patagona", bird.tree$clade)

## add patagona to mountain gems (just for convinience as mntn gems is a small clade)
tr339$clade[tr339$tip.label == "Patagona_gigas"] <- "Mtn. Gems + Patagona"
bird.tree$clade[bird.tree$tip.label == "Patagona_gigas"] <- "Mtn. Gems + Patagona"

# add tip label color for plotting to phylogeny (black = in both)
tr339$tip.col <- ifelse(tr339$tip.label %in% tr280$tip.label, "black", cols[9])
tr339$tip.col[!tr339$tip.label %in% bird.tree$tip.label] <- "green"

#splits in orange
tr339$tip.col[tr339$tip.label %in% c("Calliphlox_lyrura", "Colibri_cyanotus", "Oxypogon_lindenii",  "Oxypogon_stubelii", "Phaethornis_aethopygus", "Stephanoxis_loddigesii", "Eugenes_spectabilis")] <- "orange"


bird.tree$tip.col <- ifelse(bird.tree$tip.label %in% tr280$tip.label, "black", cols[9])
bird.tree$tip.col[!bird.tree$tip.label %in% tr339$tip.label] <- "red"


clade_trees <- lapply(unique(tr339$clade), function(x) drop.tip(phy = tr339, tip = tr339$tip.label[tr339$clade != x]))
bt_clade_trees <- lapply(unique(tr339$clade), function(x) drop.tip(phy = bird.tree, tip = bird.tree$tip.label[bird.tree$clade != x]))

names(bt_clade_trees) <- names(clade_trees) <- unique(tr339$clade)


nms <- names(clade_trees)

clade_trees <- lapply(1:length(clade_trees), function(x) {
  X <- clade_trees[[x]]
  X$tip.col <- X$tip.col[X$clade == names(clade_trees)[x]]
  X$pie.col <- X$pie.col[X$clade == names(clade_trees)[x]]
return(X)
  })

bt_clade_trees <- lapply(1:length(bt_clade_trees), function(x) {
  X <- bt_clade_trees[[x]]
  X$tip.col <- X$tip.col[X$clade == names(bt_clade_trees)[x]]
  X$pie.col <- X$pie.col[X$clade == names(bt_clade_trees)[x]]
return(X)
  })

names(bt_clade_trees) <- names(clade_trees) <- nms

compare_trees <- list(bt_clade_trees = bt_clade_trees, clade_trees = clade_trees, tr339 = tr339, bird.tree = bird.tree)

saveRDS(compare_trees, "trees for comparing bird.tree and imputed McGuire tree.RDS")
```

### McGuire (left) vs Bird tree (right)

Only showing the clades in which species were imputed (into McGuire's tree)
(Blue = imputed, red = only in bird tree, green = only in McGuire, orange = splits).

Only species recognized by Clement's list (2018) are included.

Only 15% of the species were imputed.

```{r compare imputated species, echo = FALSE, eval = T, fig.width = 12, fig.height= 10, warning=F, message=F}

trees <- readRDS("trees for comparing bird.tree and imputed McGuire tree.RDS")

bt_clade_trees <- trees[[1]]

clade_trees <- trees[[2]]

# percentage of imputed species
# round(sum(sapply(clade_trees, function(x) sum(x$tip.col == cols[9]))) / 332, 2)
# bt_clade_trees <- bt_clade_trees[match(names(clade_trees), names(bt_clade_trees))]

par(mar = c(0, 0, 3, 0), mfrow = c(1, 2))

for(i in 1:length(clade_trees)){

    #only plot the ones with imputed species
  if  (any(clade_trees[[i]]$tip.col != "black"))
  {
  cex <- if (30/Ntip(clade_trees[[i]]) > 1) 1 else 30/Ntip(clade_trees[[i]])
  if (names(clade_trees)[i] == "Emeralds") cex <- cex * 1.5
    
  # imputed McGuire
  plot.phylo(ladderize(clade_trees[[i]]), cex = cex, edge.width = 2, edge.color = cols[i], tip.color = clade_trees[[i]]$tip.col, main = names(clade_trees)[i])

  # bird tree 
    plot.phylo(ladderize(bt_clade_trees[[i]]), cex = cex, edge.width = 2, edge.color = cols[i], tip.color = bt_clade_trees[[i]]$tip.col)
}
    }

```

## Species analyzed by clade

orange = done
```{r table of species checked by cade, eval = T, echo = FALSE}

# number of species checked by clade
nm.by.cld <- sapply(unique(sp_acc$Clade), function(x)
  sum(grepl("OK", sp_acc$`Check status`[sp_acc$Clade == x]) & !is.na(sp_acc$`Check status`[sp_acc$Clade == x]))
)

nm.by.cld <- data.frame(clade = names(nm.by.cld), checked = nm.by.cld, row.names = 1:length(nm.by.cld), stringsAsFactors = FALSE)

# species with songs
nm.by.cld$`with songs` <- nm.by.cld$checked - sapply(unique(sp_acc$Clade), function(x)
  sum(grepl("OK-", sp_acc$`Check status`[sp_acc$Clade == x]) & !is.na(sp_acc$`Check status`[sp_acc$Clade == x]))
)

nm.by.cld$`prop. with songs` <- round(nm.by.cld$`with songs` / nm.by.cld$checked, 2)

nm.by.cld <- nm.by.cld[order(nm.by.cld$clade), ]

nm.by.cld$`total spp` <- c(tapply(sp_acc$Clade, sp_acc$Clade, length))

nm.by.cld$`prop. checked` <- round(nm.by.cld$checked / nm.by.cld$`total spp`, 2)

nm.by.cld$`to be checked` <- nm.by.cld$`total spp` - nm.by.cld$checked

nm.by.cld <- nm.by.cld[order(-nm.by.cld$`prop. checked` , nm.by.cld$`total spp`), ]

# write.csv(nm.by.cld, "Number of species checked by clade.csv")
# 
# nm.by.cld <- read.csv("Number of species checked by clade.csv")

nm.by.cld$`double checked` <- " "

nm.by.cld$`double checked` <- "Done"

# add total row
nm.by.cld <- rbind(nm.by.cld, nm.by.cld[1,])

nm.by.cld$clade[nrow(nm.by.cld)] <- "TOTAL"
nm.by.cld$checked[nrow(nm.by.cld)] <- sum(nm.by.cld$checked[-nrow(nm.by.cld)])
nm.by.cld$`total spp`[nrow(nm.by.cld)] <- sum(nm.by.cld$`total spp`[-nrow(nm.by.cld)])
nm.by.cld$`with songs`[nrow(nm.by.cld)] <- sum(nm.by.cld$`with songs`[-nrow(nm.by.cld)])
nm.by.cld$`to be checked`[nrow(nm.by.cld)] <- sum(nm.by.cld$`to be checked`[-nrow(nm.by.cld)])
nm.by.cld$`prop. with songs`[nrow(nm.by.cld)] <- nm.by.cld$`with songs`[nrow(nm.by.cld)] / nm.by.cld$checked[nrow(nm.by.cld)]
nm.by.cld$`prop. checked`[nrow(nm.by.cld)] <- nm.by.cld$checked[nrow(nm.by.cld)] / nm.by.cld$`total spp`[nrow(nm.by.cld)]

nm.by.cld$`double checked`[nrow(nm.by.cld)] <- " "

nm.by.cld$`prop. checked` <- round(nm.by.cld$`prop. checked`, 2)
nm.by.cld$`prop. with songs` <- round(nm.by.cld$`prop. with songs`, 2)

## add thing to color table
nm.by.cld$`double checked` <- cell_spec(nm.by.cld$`double checked`, color = "white", bold = T,
    background = ifelse(nm.by.cld$`double checked` == " ", adjustcolor("white", 0), "green"))


df1 <- knitr::kable(nm.by.cld, row.names = F, escape = FALSE)
df1 <-  kable_styling(df1, bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 18)

df1 <- row_spec(df1, row = which(nm.by.cld$`prop. checked` == 1), bold = T, color = cols[10], background = cols[4])
row_spec(df1, row = which(nm.by.cld$clade == "TOTAL"), bold = T, color = cols[1], background = cols[8])

```

```{r subset tree by clade, message=FALSE,warning=FALSE,echo=FALSE, eval=TRUE}

tr339 <- read.tree("imputed hummer tree 339 spp.tre")

# add clade
tr339$clade <- sapply(tr339$tip.label, function(x) sp_acc$Clade[sp_acc$species_uscr == x], USE.NAMES = FALSE)

# add patagona
tr339$clade <- gsub("Mtn. Gems", "Mtn. Gems + Patagona", tr339$clade)
tr339$clade[tr339$tip.label == "Patagona_gigas"] <- "Mtn. Gems + Patagona"

# color for pie and label ####
# add tip label color for plotting to phylogeny (black = already checked)
# softer gray for no recs/no songs
#if OK
tr339$pie.col <- rep(cols[7], Ntip(tr339))
tr339$tip.col <- rep("black", Ntip(tr339))

# if has not been checked
tr339$pie.col[tr339$tip.label %in% sp_acc$species_uscr[grep("progress|not done|file error|more recordings|again", sp_acc$`Check status`)] | tr339$tip.label %in% sp_acc$species_uscr[is.na(sp_acc$`Check status`)]] <- cols[5]
tr339$tip.col[tr339$tip.label %in% sp_acc$species_uscr[grep("progress|not done|file error|more recordings|again", sp_acc$`Check status`)] | tr339$tip.label %in% sp_acc$species_uscr[is.na(sp_acc$`Check status`)]] <- "gray56"

# no songs no recs
tr339$pie.col[tr339$tip.label %in% sp_acc$species_uscr[grep("no songs|no recs", sp_acc$`Check status`)]] <- cols[2]
tr339$tip.col[tr339$tip.label %in% sp_acc$species_uscr[grep("no songs|no recs", sp_acc$`Check status`)]] <- "gray56"

## new species
tr339$pie.col[tr339$tip.label %in% sp_acc$species_uscr[grep("new species", sp_acc$`Check status`)]] <- "white"
tr339$tip.col[tr339$tip.label %in% sp_acc$species_uscr[grep("new species", sp_acc$`Check status`)]] <- "gray56"

# split by clade
clade_trees <- lapply(unique(tr339$clade), function(x) drop.tip(phy = tr339, tip = tr339$tip.label[tr339$clade != x]))

names(clade_trees) <- unique(tr339$clade)

nms <- names(clade_trees)

clade_trees <- lapply(1:length(clade_trees), function(x) {
  X <- clade_trees[[x]]
  X$tip.col <- X$tip.col[X$clade == names(clade_trees)[x]]
  X$pie.col <- X$pie.col[X$clade == names(clade_trees)[x]]
return(X)
  })

names(clade_trees) <- nms

#all trees together
# par(mfrow = c(2, 4), mar = c(0, 0, 2, 0))
# out <- lapply(1:length(clade_trees), function(x) plot.phylo(clade_trees[[x]],  main = names(clade_trees)[x], edge.width = 2, tip.color = clade_trees[[x]]$tip.col, edge.color = cols[x]))

saveRDS(clade_trees, "trees by clade.RDS")

```

```{r plot trees, message=FALSE,warning=FALSE,echo=FALSE, eval = FALSE}

clade_trees <- readRDS("trees by clade.RDS")

par(mar = c(0, 0, 3, 3), mfrow = c(1, 1))
for(i in 1:length(clade_trees)){
  
  plot.phylo(clade_trees[[i]], cex = if (30/Ntip(clade_trees[[i]]) > 1) 1 else 30/Ntip(clade_trees[[i]]), edge.width = 2, edge.color = cols[i], font = 3, label.offset = 0.5, tip.color = clade_trees[[i]]$tip.col, main = names(clade_trees)[i])

  tiplabels(bg = clade_trees[[i]]$pie.col, cex = 1, pch = 21, offset = 0.3)   

  col.labs <- setNames(adjustcolor(unique(tr339$pie.col), 0.9), c("OK!", "New species", "No recs/no songs",  "Not checked"))

  if (i == 1)
  add.simmap.legend(colors = col.labs, prompt = FALSE, fsize = 1, shape = "circle", x = 4.3, 
                  y = 4, cex= 20)
}

```

```{r Swift tree, echo = FALSE, eval = FALSE}

swift.trees <- read.nexus("bird.tree.swift.phylo.1000.trees.nex")

swift.tree <- phangorn::maxCladeCred(swift.trees)

# swift.tree$tip.label

# plot.phylo(swift.tree, cex = 0.7, no.margin = T)

fix.tips.bt <- fux.tax.search(qwords = swift.tree$tip.label, sep = "_", parallel = 1, top = 1, clements = T)

df.bt <- data.frame(fix.tips.bt, labels = swift.tree$tip.label, equal = fix.tips.bt == swift.tree$tip.label, stringsAsFactors = FALSE)

df.bt$labels[!df.bt$equal] <- gsub("Collocalia", "Aerodramus", df.bt$labels[!df.bt$equal])

df.bt$fix.tips.bt[!df.bt$equal] <- fux.tax.search(df.bt$labels[!df.bt$equal], sep = "_", parallel = 1, top = 1, clements = T)

df.bt$equal <- df.bt$fix.tips.bt == df.bt$labels

df.bt[!df.bt$equal, ]

df.bt <- df.bt[!df.bt$labels %in% c("Aerodramus_palawanensis", "Aerodramus_rogersi", "Apus_toulsoni", "Apus_sladeniae"),]

setdiff(sp_acc$species_uscr[sp_acc$Clade == "Swifts"], df.bt$fix.tips.bt)

fux.tax.search(c("Augastes_lumachella", "Augastes_scutatus"), sep = "_", parallel = 1, top = 1, clements = T)
grep("Augastes", df.bt$labels)


swift.tree$pie.col <- rep(cols[7], Ntip(swift.tree))
swift.tree$tip.col <- rep("black", Ntip(swift.tree))

# if has not been checked
swift.tree$pie.col[swift.tree$tip.label %in% sp_acc$species_uscr[grep("progress|not done|file error|more recordings|again", sp_acc$`Check status`)]  | swift.tree$tip.label %in% sp_acc$species_uscr[is.na(sp_acc$`Check status`)]] <- cols[5]
swift.tree$tip.col[swift.tree$tip.label %in% sp_acc$species_uscr[grep("progress|not done|file error|more recordings|again", sp_acc$`Check status`)]  | swift.tree$tip.label %in% sp_acc$species_uscr[is.na(sp_acc$`Check status`)]] <- "gray56"

# not in species account
swift.tree$pie.col[!swift.tree$tip.label %in% sp_acc$species_uscr] <- cols[2]
swift.tree$tip.col[!swift.tree$tip.label %in% sp_acc$species_uscr] <- "gray56"

# no songs no recs
swift.tree$pie.col[swift.tree$tip.label %in% sp_acc$species_uscr[grep("no songs|no recs", sp_acc$`Check status`)]] <- cols[2]
swift.tree$tip.col[swift.tree$tip.label %in% sp_acc$species_uscr[grep("no songs|no recs", sp_acc$`Check status`)]] <- "gray56"

# write.tree(swift.tree, "curated bird.tree swfit phylogeny.tre")

saveRDS(swift.tree, "curated bird.tree swfit phylogeny.RDS")
```

```{r fix Swift multiPhylo, echo = FALSE, eval = FALSE}

swift.trees <- read.nexus("bird.tree.swift.phylo.1000.trees.nex")

swift.tree <- phangorn::maxCladeCred(swift.trees)

# swift.tree$tip.label

# plot.phylo(swift.tree, cex = 0.7, no.margin = T)
set.seed(10)
swift.trees <- swift.trees[sample(1:length(swift.trees), 100)]


fix.tips.bt <- fux.tax.search(qwords = swift.tree$tip.label, sep = "_", parallel = 1, top = 1, clements = T)

df.bt <- data.frame(fix.tips.bt, labels = swift.tree$tip.label, equal = fix.tips.bt == swift.tree$tip.label, stringsAsFactors = FALSE)

df.bt$org.labels <- df.bt$labels

df.bt$labels[!df.bt$equal] <- gsub("Collocalia", "Aerodramus", df.bt$labels[!df.bt$equal])

df.bt$fix.tips.bt[!df.bt$equal] <- fux.tax.search(df.bt$labels[!df.bt$equal], sep = "_", parallel = 1, top = 1, clements = T)

df.bt$equal <- df.bt$fix.tips.bt == df.bt$labels

# remove species in data frame
df.bt <- df.bt[!df.bt$labels %in% c("Aerodramus_palawanensis", "Aerodramus_rogersi", "Apus_toulsoni", "Apus_sladeniae"),]

df.bt[!df.bt$equal, ]

sp <- read.csv("Element parameters hummingbirds and swifts.csv", stringsAsFactors = FALSE)

swifts <- unique(sp$Species[sp$Clade == "Swifts"])

# all in analyzed songs
all(gsub(" ", "_",swifts) %in% df.bt$fix.tips.bt)

swift.bt.trees <- lapply(swift.trees, function(x){
  
  x <- drop.tip(x, tip = grep("palawanensis|rogersi|toulsoni|sladeniae", x$tip.label))
  
  all(x$tip.label %in% df.bt$org.labels)
  
    sp.nms <- as.character(df.bt$fix.tips.bt[match(df.bt$org.labels, x$tip.label)])

  x$tip.label <- sp.nms

  x <- drop.tip(x, tip = setdiff(x$tip.label, gsub(" ", "_",swifts)))
    # keep only the ones with analyzed recordings
  })

all(gsub(" ", "_",swifts) %in% out[[1]]$tip.label)

class(swift.bt.trees) <- "multiPhylo"

write.tree(swift.bt.trees, "100_trees_31_swift_species_birdtree.trees")


```

Swift tree downloaded from birdtree.org (oct-2018)
```{r Swift tree plot, echo = FALSE, eval = TRUE}

swift.tree <- readRDS("curated bird.tree swfit phylogeny.RDS")

par(mar = c(0, 0, 3, 3), mfrow = c(1, 1))

plot.phylo(swift.tree, cex = if (30/Ntip(swift.tree) > 1) 1 else 30/Ntip(swift.tree), edge.width = 2, edge.color = cols[9], font = 3, label.offset = 0.5, tip.color = swift.tree$tip.col, main = "Swifts")

tiplabels(bg = swift.tree$pie.col, cex = 1, pch = 21, offset = 0.3)   

  # col.labs <- setNames(adjustcolor(unique(tr339$pie.col), 0.9), c("OK!", "New species", "No recs/no songs",  "Not checked"))
  # 
  # if (i == 1)
  # add.simmap.legend(colors = col.labs, prompt = FALSE, fsize = 1, shape = "circle", x = 4.3, 
  #                 y = 4, cex= 20)
```

```{r bind swift and hummingbird trees, eval = FALSE, echo=FALSE}

swift.tree <- readRDS("curated bird.tree swfit phylogeny.RDS")

tr339 <- read.tree("imputed hummer tree 339 spp.tre")

tr339$edge.length <- tr339$edge.length / max(tr339$edge.length)

swift.tree$edge.length <- swift.tree$edge.length / max(swift.tree$edge.length)

is.rooted(swift.tree)
is.rooted(tr339)

hm.swft.tr <- bind.tree(tr339, swift.tree)

plot.phylo(hm.swft.tr, show.tip.label = FALSE, no.margin = TRUE)

```

## Spectrograms on phylogenies
```{r import selections, message = FALSE, warning = FALSE, echo = FALSE, eval = FALSE}
  
#read selection from swifts and hummingbirds
sels <- imp_raven(path = "./sound selection files/MARCELO USE ONLY/finished (linux)/", all.data = TRUE, sound.file.col = "Begin File", parallel = 1, warbler.format = TRUE)

# count species names in selection files
cnt.sp <- sapply(unique(sels$selec.file), function(x) length(unique(sels$Species[sels$selec.file == x & sels$Species != ""])))

# selections with more than 1 species name 
names(cnt.sp)[cnt.sp > 1]


# fill empty Species column with species name
out <- lapply(unique(sels$selec.file), function(x) {
  
  X <- sels[sels$selec.file == x, ]
  
  X$Species <- unique(sels$Species[sels$selec.file == x & sels$Species != ""])

return(X)  
  })


sels <- do.call(rbind, out)


#check species
unique(sels$Species)

# check selection type
unique(sels$selection_type)

# keep only elements (remove full song selections)
sels <- sels[sels$selection_type %in% c("elements", "", "element") | is.na(sels$selection_type), ]

 # View(sels[grep("a$", sels$selection_type), ])

# View(sels[grep("Phaethornis|here|song|simple|Heliodoxa", sels$element_labels, invert = TRUE), ])
# unique(sels$element_labels)

sels$element_labels <- gsub("eeeeeeee", "ee", sels$element_labels)
sels$element_labels <- gsub("eeee", "e", sels$element_labels)

# remove weird selection names
sels <- sels[grep("Phaethornis|here|song|simple|Heliodoxa", sels$element_labels, invert = TRUE, ignore.case = TRUE), ]

# unique(sels$element_labels)

# sels$sound.files[sels$element_labels == ""]

# check if all have a number at the begining
if (anyNA(as.numeric(substr(start = 0,stop =  1, sels$element_labels)))) "some element labels don't start with a number"

#check if all have a letter after the number
if(any(!is.na(as.numeric(gsub('[0-9]+', '', sels$element_labels))))) "some don't have a letter"
 
# sels[sels$element_labels == "", ]

View(sels[is.na(as.numeric(substr(start = 0,stop =  1, sels$element_labels))), ])

  #  remove NAs
# sels <- sels[!is.na(sels$element_labels), ]

sels$Species[sels$Species == "" | is.na(sels$Species)] <- gsub(".sound.selection.txt", "", sels$selec.file[sels$Species == ""])

# keep only clade and species info from sp_acc and merge into sels
sels <- merge(sels, sp_acc[c("Clade", "Updated species name", "Check status")], by.x = "Species", by.y = "Updated species name", all = FALSE)

# table(sels$`Check status`)

#check the ones not OK
# View(sels[(sels$`Check status` != "OK" | is.na(sels$`Check status`)) & sels$Clade != "Swifts", ])

#remove the ones not OK
sels <- sels[grep("OK", sels$`Check status`)  & !is.na(sels$`Check status`), ]

out <- lapply(unique(sels$sound.files), function(x) {
  X <- sels[sels$sound.files == x, ]
  X$selec <- 1:nrow(X)
return(X)
  })

sels <- do.call(rbind, out)

sels <- checksels(sels)

# View(sels[sels$check.res != "OK",])

table(sels$check.res)

# sels <- sels[sels$check.res == "OK", ]

sels$Species_uscr <- gsub(" ", "_", sels$Species)

# add song label that includes sound file
sels$song.lab <- sels$song <- gsub(paste(letters, collapse = "|"), '', sels$element_labels)
sels$song <- paste(sels$sound.files, sels$song, sep = "-")
sels$element <- gsub(paste(1:30, collapse = "|"), '', sels$element_labels)


if (any(duplicated(sels[, c("sound.files", "start", "end")]))) "some duplicated selections were found"
# View( sels[duplicated(sels[, c("sound.files", "start", "end")]) | duplicated(sels[, c("sound.files", "start", "end")], fromLast = TRUE),])


# sels <- sels[!duplicated(sels[, c("sound.files", "start", "end")]),]

# look for overlapping sels
ovlp.sls <- prop_ovlp(X = sels, pb = T, parallel = 3)


if (sum(ovlp.sls$max.prop.ovlp > 0.8) > 0) 
{
  ("some selections overlapped more than 80%:")
  sels$sound.files[ovlp.sls$max.prop.ovlp > 0.8]
  }

# View(sels[!is.na(sels$ovlp.sels), c("sound.files", "selec", "start", "end", "duration", "ovlp.sels", "selec.file", "old.selec")])

# ovlpsls <- sels[!is.na(sels$ovlp.sels), c("sound.files", "selec", "start", "end", "duration", "ovlp.sels", "selec.file", "old.selec")]

# measure SNR
sels <- sig2noise(sels, mar =  0.01, type = 2, in.dB = TRUE)

#remove empty spaces
sels$song.lab <- gsub(" ", "", sels$song.lab)
sels$song <- gsub(" ", "", sels$song)
  
song.sels <- song_param(X = sels[, c("sound.files", "selec", "start", "end", "song.lab", "bottom.freq", "top.freq")], song_colm = "song.lab") 

song.sels$selec <- 1:nrow(song.sels)

# head(song.sels)

ovlp.songs <- ovlp_sels(song.sels, indx.row = TRUE)

if (sum(!is.na(ovlp.songs$ovlp.sels)) > 0)
ovlp.songs[!is.na(ovlp.songs$ovlp.sels),]


# check if all species with songs are included
# read selections
setdiff(sp_acc$species[sp_acc$`Check status` == "OK" & !is.na(sp_acc$`Check status`)], unique(sels$Species))

setdiff(unique(sels$Species), sp_acc$species)

# write.csv(sels, "Selections for checked species.csv", row.names = FALSE)

est <- selection_table(sels, extended = TRUE, confirm.extended = FALSE)

# saveRDS(est, "Extended selection table all clades.RDS")
```

```{r spectrograms for each song or sound file, message = FALSE, warning = FALSE, echo = FALSE, eval = FALSE}

clade_trees <- readRDS("trees by clade.RDS")

sels <- read.csv("Selections for checked species.csv", stringsAsFactors = FALSE)

sels <- sels[sels$Clade == "Swifts", ]
# get sub tree
  
for(w in unique(sels$Clade))
{
   cld_sels <- sels[sels$Clade %in% w, ]
  # cld_sels <- sels[sels$Species %in% spp, ]

## lspec
out <- pblapply(unique(cld_sels$sound.files), function(x)  {
    
    X <- cld_sels[cld_sels$sound.files == x, ]

      aut <- suppressWarnings(dir.create(file.path("/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/long-spectros/", X$Clade[1])))

      ## long spectrograms
  a <- try_na(lspec(X, labels = "element", pb = FALSE, fast.spec = TRUE, flim = c(if(min(X$bottom.freq) - 1 > 0) min(X$bottom.freq) - 1 else 0, if(max(X$top.freq) + 5 < 22) max(X$top.freq) + 5 else 22), overwrite = F, horizontal = T, song = "song.lab"))
  
    move_imgs(to = file.path("/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/long-spectros", X$Clade[1]), from = .Options$warbleR$wav.path, pb = FALSE, overwrite = T)

    # move_imgs(to = "/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/long-spectros/temp", from = .Options$warbleR$wav.path, pb = FALSE, overwrite = T)        
    
    return(a)
    })  

}

## specreator

# out <- pblapply(unique(cld_sels$sound.files), function(x)  {
# # out <- pblapply(qq, function(x)  {    
#     X <- cld_sels[cld_sels$sound.files == x, ]
#     
#     # leave numbers only
# 
#   aut <- suppressWarnings(dir.create(file.path("/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/specreator/", X$Clade[1]))) 
#         
 
#   
#    a <-try_na(specreator(X, by.song = "song.lab", sel.labels = "element", mar = 0.1, pb = FALSE, xl = 3, title.labels = c("sound.files", "song.lab"), dest.path = file.path("/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/specreator/", X$Clade[1]), line = TRUE, collevels = seq(-50, 0 , 5), fast.spec = TRUE, parallel = 1))
# 
#    return(a)
#     }
# )

names(out) <- unique(cld_sels$sound.files)

qq <- names(out)[!sapply(out, is.list)]

if(length(qq) > 0) "some didn't work"

qq

```

Shows the song within the %50 quantile for the number of unique elements that has the highest signal-to-noise ratio
```{r select one song per species, message = FALSE, warning = FALSE, echo = FALSE, eval = FALSE}

sels <- read.csv("Selections for checked species.csv", stringsAsFactors = FALSE)

sels$SNR <- as.numeric(sels$SNR)

out <- lapply(unique(sels$Species), function(x)  {

      X <- sels[sels$Species == x, ]
      
    if (length(unique(X$song)) > 1)
      {
        X_sng <- song_param(X = X, song_colm = "song", mean_colm = "SNR", pb = FALSE)

       X_sng2 <- X[X_sng$num.elemts >= quantile(X_sng$num.elemts, c(0.25)) & X_sng$num.elemts <= quantile(X_sng$num.elemts, c(0.75)), ]
       
       if (nrow(X_sng2) == 0) X_sng2 <- X_sng
       
       sng <- X_sng2$song[which.max(X_sng2$SNR)]
      
      } else sng <- X$song[1]

   return(X[X$song == sng, ])
    }
)


names(out) <- unique(sels$Species)

# how many elements per species-song
sapply(out, nrow)

if(length(names(out)[!sapply(out, is.data.frame)]) > 0) "some didn't work"

slctd_sngs <- do.call(rbind, out)

rownames(slctd_sngs) <- 1:nrow(slctd_sngs)

if (any(!table(slctd_sngs$Species[!duplicated(slctd_sngs$song)]) == 1)) "more than one song for some species"

if (length(unique(slctd_sngs$Species[!duplicated(slctd_sngs$song)])) != length(unique(sels$Species))) "not all species in sels have a song"

# write.csv(slctd_sngs, "Selected song per species.csv", row.names = FALSE)

# slctd_sngs <- read.csv("Selected song per species.csv", stringsAsFactors = FALSE)

# calculate start and end for each song
sngs <- song_param(slctd_sngs, song_colm = "song")
sngs$Species <- sapply(sngs$sound.files, function(x) paste(strsplit(x, "-")[[1]][1], strsplit(x, "-")[[1]][2]))

sngs$tip.label <- sapply(sngs$sound.files, function(x) paste(strsplit(x, "-")[[1]][1], strsplit(x, "-")[[1]][2], sep = "_"))

sngs$Species[sngs$Species == "Aphantochroa cirrhochloris"] <- "Aphantochroa cirrochloris"

sngs$tip.label[sngs$tip.label == "Aphantochroa_cirrhochloris"] <- "Aphantochroa_cirrochloris"

# rename song column as selec
names(sngs)[names(sngs) == "song"] <- "selec"

sngs$Clade <- sapply(sngs$Species, function(x) sp_acc$Clade[sp_acc$species == x], USE.NAMES = FALSE)

write.csv(sngs, "Selections by selected song per species.csv", row.names = FALSE)

```

```{r spectrograms for selected songs, message = FALSE, warning = FALSE, echo = FALSE, eval = FALSE}

# clade_trees <- readRDS("trees by clade.RDS")

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
# cld_sngs <- sngs[sngs$Clade %in% c("Topazes", "Brilliants", "Mangoes", "Bees"), ]

out <- pblapply(unique(sngs$Species), function(x)  {
    
    X <- sngs[sngs$Species == x, ]

  aut <- suppressWarnings(dir.create(file.path("/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/example-song/", X$Clade[1])))

   a <-try_na(specreator(X, mar = 0.1, pb = FALSE, xl = 3, title.labels = c("sound.files", "selec"), dest.path = file.path("/home/m/Dropbox/Projects/Hummingbird song evolution/Acoustic analysis/example-song", X$Clade[1]), line = TRUE, collevels = seq(-50, 0 , 5), fast.spec = TRUE))

   return(a)
    }
)

names(out) <- unique(sngs$sound.files)

qq <- names(out)[!sapply(out, is.list)]

if(length(qq) > 0) "some didn't work"

qq

```

### Topazes
```{r spectros on phylo topazes, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 5}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Topazes"

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

phylo_spectro(X = cld_sngs, tree, xl = 2, offset = 4, size = 1, par.mar = c(1, 0, 6, 15), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)

# mtext(side = 3, text = cld, outer = T, cex = 3, line = -3)

```

### Hermits
```{r spectros on phylo hermits, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 20}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Hermits"


sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

phylo_spectro(cld_sngs, tree, xl = 2, offset = 8, size = 1, par.mar = c(1, 0, 3, 40), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 0.8, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)

```

### Mangoes
```{r spectros on phylo mangoes, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 14}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Mangoes"

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

phylo_spectro(cld_sngs, tree, offset = 6, size = 1, par.mar = c(1, 0, 3, 30), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 1, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)

```

### Brilliants
```{r spectros on phylo brilliants, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 14}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Brilliants"

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

phylo_spectro(cld_sngs, tree, offset = 4, size = 1, par.mar = c(1, 0, 3, 30), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 1, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)

```

### Coquettes
```{r spectros on phylo Coquettes, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 14}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Coquettes"

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

phylo_spectro(cld_sngs, tree, offset = 4, size = 1, par.mar = c(1, 0, 3, 30), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 1, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)

```

### Mtn. Gems + Patagona
```{r spectros on phylo Mtn. Gems + Patagona, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 9}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Mtn. Gems + Patagona"

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

phylo_spectro(cld_sngs, tree, offset = 5, size = 1, par.mar = c(1, 0, 3, 30), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 1, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)

```

### Bees
```{r spectros on phylo Bees, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 10}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Bees"

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))


phylo_spectro(cld_sngs, tree, xl = 1, offset = 4, size = 1, par.mar = c(1, 0, 3, 50), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 0.8, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)
```

### Emeralds
```{r spectros on phylo Emeralds, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 22}

clade_trees <- readRDS("trees by clade.RDS")

cld <- "Emeralds"

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- clade_trees[[which(names(clade_trees) == cld)]]

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

phylo_spectro(cld_sngs, tree, offset = 5, size = 1, par.mar = c(1, 0, 3, 40), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 0.7, edge.color = cols[which(names(clade_trees) == cld)], edge.width = 3)

```

### Swifts
```{r spectros on phylo Swifts, echo = FALSE, eval = TRUE, fig.width = 12, fig.height = 22}

sngs <- read.csv("Selections by selected song per species.csv", stringsAsFactors = FALSE)

# get sub tree
tree <- readRDS("curated bird.tree swfit phylogeny.RDS")

tree$tip.label <- gsub("_", "\n", tree$tip.label)
sngs$tip.label <- gsub("_", "\n", sngs$tip.label)

cld_sngs <- sngs[sngs$tip.label %in% tree$tip.label, ]

tree <- drop.tip(tree, tip = setdiff(tree$tip.label, cld_sngs$tip.label))

setdiff(cld_sngs$tip.label, tree$tip.label)
setdiff(tree$tip.label, cld_sngs$tip.label)

phylo_spectro(cld_sngs, tree, offset = 5, size = 1, par.mar = c(1, 0, 3, 40), inner.mar = rep(0, 4), propwidth = T, ovlp = 10, fast.spec = T, mar = 0.1, res = 20, cex = 0.7, edge.color = "black", edge.width = 3)

```

---

<font size="5">Session information</font>

```{r session info, echo=F}

sessionInfo()


```



